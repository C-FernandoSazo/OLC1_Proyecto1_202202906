
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Analizadores.Objetos.Util;
import Analizadores.Objetos.Errores;
import Analizadores.Objetos.Variable;
import java.util.ArrayList;
import Operaciones.Graficar;
import Operaciones.Estadistica;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\006\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\003\013\000\002\003\012\000\002" +
    "\007\016\000\002\007\015\000\002\024\005\000\002\024" +
    "\003\000\002\010\005\000\002\010\003\000\002\020\005" +
    "\000\002\020\003\000\002\015\011\000\002\015\010\000" +
    "\002\016\005\000\002\016\003\000\002\021\013\000\002" +
    "\021\012\000\002\022\004\000\002\022\005\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\010" +
    "\000\002\011\010\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\012\005\000\002\012\004\000\002\025" +
    "\005\000\002\025\004\000\002\006\002\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\003\000\002\023\003\000\002\026\014\000\002\026" +
    "\014\000\002\026\014\000\002\026\014\000\002\027\004" +
    "\000\002\027\003\000\002\030\011\000\002\030\011\000" +
    "\002\030\011\000\002\030\011\000\002\030\011\000\002" +
    "\030\011\000\002\030\011\000\002\030\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\004\014\005\001\002\000\004\002\354\001" +
    "\002\000\022\003\020\010\014\022\006\030\023\046\016" +
    "\047\013\050\022\051\011\001\002\000\004\012\341\001" +
    "\002\000\024\003\ufffa\010\ufffa\015\ufffa\022\ufffa\030\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002\000\024\003" +
    "\ufffe\010\ufffe\015\ufffe\022\ufffe\030\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\001\002\000\004\025\330\001\002\000" +
    "\024\003\020\010\014\015\326\022\006\030\023\046\016" +
    "\047\013\050\022\051\011\001\002\000\004\025\314\001" +
    "\002\000\004\012\304\001\002\000\024\003\ufffd\010\ufffd" +
    "\015\ufffd\022\ufffd\030\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\001\002\000\004\025\273\001\002\000\024\003\ufffb" +
    "\010\ufffb\015\ufffb\022\ufffb\030\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\001\002\000\004\011\272\001\002\000\024" +
    "\003\ufff9\010\ufff9\015\ufff9\022\ufff9\030\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\001\002\000\004\025\164\001\002" +
    "\000\004\013\025\001\002\000\024\003\ufffc\010\ufffc\015" +
    "\ufffc\022\ufffc\030\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\001\002\000\006\031\026\032\027\001\002\000\004\027" +
    "\155\001\002\000\004\027\030\001\002\000\042\004\044" +
    "\005\041\006\032\007\033\017\uffd6\033\034\034\055\035" +
    "\036\036\037\037\031\040\053\041\047\042\054\043\050" +
    "\044\051\045\045\001\002\000\004\025\150\001\002\000" +
    "\014\015\uffce\017\uffce\020\uffce\024\uffce\026\uffce\001\002" +
    "\000\014\015\uffd1\017\uffd1\020\uffd1\024\uffd1\026\uffd1\001" +
    "\002\000\004\025\143\001\002\000\004\017\127\001\002" +
    "\000\004\025\122\001\002\000\004\025\115\001\002\000" +
    "\014\015\uffcf\017\uffcf\020\uffcf\024\uffcf\026\uffcf\001\002" +
    "\000\014\015\uffd2\017\uffd2\020\uffd2\024\uffd2\026\uffd2\001" +
    "\002\000\014\015\uffd3\017\uffd3\020\uffd3\024\uffd3\026\uffd3" +
    "\001\002\000\014\015\uffd0\017\uffd0\020\uffd0\024\uffd0\026" +
    "\uffd0\001\002\000\014\015\uffcd\017\uffcd\020\uffcd\024\uffcd" +
    "\026\uffcd\001\002\000\004\025\112\001\002\000\014\015" +
    "\uffd5\017\uffd5\020\uffd5\024\uffd5\026\uffd5\001\002\000\004" +
    "\025\107\001\002\000\004\025\104\001\002\000\004\025" +
    "\101\001\002\000\014\015\uffd4\017\uffd4\020\uffd4\024\uffd4" +
    "\026\uffd4\001\002\000\004\025\076\001\002\000\004\025" +
    "\063\001\002\000\004\025\056\001\002\000\042\004\044" +
    "\005\041\006\032\007\033\020\uffd6\033\034\034\055\035" +
    "\036\036\037\037\031\040\053\041\047\042\054\043\050" +
    "\044\051\045\045\001\002\000\004\020\060\001\002\000" +
    "\042\004\044\005\041\006\032\007\033\026\uffd6\033\034" +
    "\034\055\035\036\036\037\037\031\040\053\041\047\042" +
    "\054\043\050\044\051\045\045\001\002\000\004\026\062" +
    "\001\002\000\014\015\uffe4\017\uffe4\020\uffe4\024\uffe4\026" +
    "\uffe4\001\002\000\006\021\065\023\064\001\002\000\044" +
    "\004\044\005\041\006\032\007\033\020\uffd6\024\uffd6\033" +
    "\034\034\055\035\036\036\037\037\031\040\053\041\047" +
    "\042\054\043\050\044\051\045\045\001\002\000\004\004" +
    "\070\001\002\000\004\026\067\001\002\000\014\015\uffde" +
    "\017\uffde\020\uffde\024\uffde\026\uffde\001\002\000\006\015" +
    "\uffd9\026\uffd9\001\002\000\006\020\073\024\074\001\002" +
    "\000\006\020\ufff0\024\ufff0\001\002\000\044\004\044\005" +
    "\041\006\032\007\033\020\uffd6\024\uffd6\033\034\034\055" +
    "\035\036\036\037\037\031\040\053\041\047\042\054\043" +
    "\050\044\051\045\045\001\002\000\006\015\uffda\026\uffda" +
    "\001\002\000\006\020\ufff1\024\ufff1\001\002\000\006\021" +
    "\065\023\064\001\002\000\004\026\100\001\002\000\014" +
    "\015\uffe0\017\uffe0\020\uffe0\024\uffe0\026\uffe0\001\002\000" +
    "\006\021\065\023\064\001\002\000\004\026\103\001\002" +
    "\000\014\015\uffdc\017\uffdc\020\uffdc\024\uffdc\026\uffdc\001" +
    "\002\000\006\021\065\023\064\001\002\000\004\026\106" +
    "\001\002\000\014\015\uffdd\017\uffdd\020\uffdd\024\uffdd\026" +
    "\uffdd\001\002\000\006\021\065\023\064\001\002\000\004" +
    "\026\111\001\002\000\014\015\uffdf\017\uffdf\020\uffdf\024" +
    "\uffdf\026\uffdf\001\002\000\006\021\065\023\064\001\002" +
    "\000\004\026\114\001\002\000\014\015\uffdb\017\uffdb\020" +
    "\uffdb\024\uffdb\026\uffdb\001\002\000\042\004\044\005\041" +
    "\006\032\007\033\020\uffd6\033\034\034\055\035\036\036" +
    "\037\037\031\040\053\041\047\042\054\043\050\044\051" +
    "\045\045\001\002\000\004\020\117\001\002\000\042\004" +
    "\044\005\041\006\032\007\033\026\uffd6\033\034\034\055" +
    "\035\036\036\037\037\031\040\053\041\047\042\054\043" +
    "\050\044\051\045\045\001\002\000\004\026\121\001\002" +
    "\000\014\015\uffe2\017\uffe2\020\uffe2\024\uffe2\026\uffe2\001" +
    "\002\000\042\004\044\005\041\006\032\007\033\020\uffd6" +
    "\033\034\034\055\035\036\036\037\037\031\040\053\041" +
    "\047\042\054\043\050\044\051\045\045\001\002\000\004" +
    "\020\124\001\002\000\042\004\044\005\041\006\032\007" +
    "\033\026\uffd6\033\034\034\055\035\036\036\037\037\031" +
    "\040\053\041\047\042\054\043\050\044\051\045\045\001" +
    "\002\000\004\026\126\001\002\000\014\015\uffe3\017\uffe3" +
    "\020\uffe3\024\uffe3\026\uffe3\001\002\000\006\021\132\023" +
    "\130\001\002\000\044\004\044\005\041\006\032\007\033" +
    "\020\uffd6\024\uffd6\033\034\034\055\035\036\036\037\037" +
    "\031\040\053\041\047\042\054\043\050\044\051\045\045" +
    "\001\002\000\004\015\134\001\002\000\004\004\133\001" +
    "\002\000\004\015\uffe7\001\002\000\026\003\uffe8\010\uffe8" +
    "\011\135\015\uffe8\022\uffe8\030\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\001\002\000\024\003\uffe9\010\uffe9\015\uffe9" +
    "\022\uffe9\030\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\001" +
    "\002\000\006\020\ufff2\024\ufff2\001\002\000\006\020\140" +
    "\024\141\001\002\000\044\004\044\005\041\006\032\007" +
    "\033\020\uffd6\024\uffd6\033\034\034\055\035\036\036\037" +
    "\037\031\040\053\041\047\042\054\043\050\044\051\045" +
    "\045\001\002\000\004\015\uffe6\001\002\000\006\020\ufff3" +
    "\024\ufff3\001\002\000\042\004\044\005\041\006\032\007" +
    "\033\020\uffd6\033\034\034\055\035\036\036\037\037\031" +
    "\040\053\041\047\042\054\043\050\044\051\045\045\001" +
    "\002\000\004\020\145\001\002\000\042\004\044\005\041" +
    "\006\032\007\033\026\uffd6\033\034\034\055\035\036\036" +
    "\037\037\031\040\053\041\047\042\054\043\050\044\051" +
    "\045\045\001\002\000\004\026\147\001\002\000\014\015" +
    "\uffe5\017\uffe5\020\uffe5\024\uffe5\026\uffe5\001\002\000\042" +
    "\004\044\005\041\006\032\007\033\020\uffd6\033\034\034" +
    "\055\035\036\036\037\037\031\040\053\041\047\042\054" +
    "\043\050\044\051\045\045\001\002\000\004\020\152\001" +
    "\002\000\042\004\044\005\041\006\032\007\033\026\uffd6" +
    "\033\034\034\055\035\036\036\037\037\031\040\053\041" +
    "\047\042\054\043\050\044\051\045\045\001\002\000\004" +
    "\026\154\001\002\000\014\015\uffe1\017\uffe1\020\uffe1\024" +
    "\uffe1\026\uffe1\001\002\000\044\004\044\005\041\006\032" +
    "\007\033\015\uffd6\020\uffd6\033\034\034\055\035\036\036" +
    "\037\037\031\040\053\041\047\042\054\043\050\044\051" +
    "\045\045\001\002\000\006\015\161\020\160\001\002\000" +
    "\006\015\uffea\020\uffea\001\002\000\044\004\044\005\041" +
    "\006\032\007\033\015\uffd6\020\uffd6\033\034\034\055\035" +
    "\036\036\037\037\031\040\053\041\047\042\054\043\050" +
    "\044\051\045\045\001\002\000\026\003\uffec\010\uffec\011" +
    "\162\015\uffec\022\uffec\030\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\001\002\000\024\003\uffed\010\uffed\015\uffed\022" +
    "\uffed\030\uffed\046\uffed\047\uffed\050\uffed\051\uffed\001\002" +
    "\000\006\015\uffeb\020\uffeb\001\002\000\022\003\174\052" +
    "\165\053\167\054\166\055\173\056\172\057\175\060\171" +
    "\001\002\000\004\013\264\001\002\000\004\013\256\001" +
    "\002\000\004\013\250\001\002\000\024\003\174\052\165" +
    "\053\167\054\166\055\173\056\172\057\175\060\171\061" +
    "\240\001\002\000\004\013\222\001\002\000\004\013\214" +
    "\001\002\000\004\013\206\001\002\000\004\011\205\001" +
    "\002\000\004\013\177\001\002\000\024\003\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\001\002\000\004\004\200\001\002\000\004\027\201" +
    "\001\002\000\006\021\065\023\064\001\002\000\004\015" +
    "\203\001\002\000\004\011\204\001\002\000\024\003\uffc0" +
    "\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\001\002\000\024\003\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\001" +
    "\002\000\004\004\207\001\002\000\004\027\210\001\002" +
    "\000\042\004\044\005\041\006\032\007\033\015\uffd6\033" +
    "\034\034\055\035\036\036\037\037\031\040\053\041\047" +
    "\042\054\043\050\044\051\045\045\001\002\000\004\015" +
    "\212\001\002\000\004\011\213\001\002\000\024\003\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\001\002\000\004\004\215\001\002\000\004" +
    "\027\216\001\002\000\042\004\044\005\041\006\032\007" +
    "\033\015\uffd6\033\034\034\055\035\036\036\037\037\031" +
    "\040\053\041\047\042\054\043\050\044\051\045\045\001" +
    "\002\000\004\015\220\001\002\000\004\011\221\001\002" +
    "\000\024\003\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002\000\004\004\223" +
    "\001\002\000\004\027\224\001\002\000\006\021\227\023" +
    "\225\001\002\000\044\004\044\005\041\006\032\007\033" +
    "\020\uffd6\024\uffd6\033\034\034\055\035\036\036\037\037" +
    "\031\040\053\041\047\042\054\043\050\044\051\045\045" +
    "\001\002\000\004\015\231\001\002\000\004\004\230\001" +
    "\002\000\004\015\uffd7\001\002\000\004\011\232\001\002" +
    "\000\024\003\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\061\uffc1\001\002\000\006\020\uffee" +
    "\024\uffee\001\002\000\006\020\235\024\236\001\002\000" +
    "\044\004\044\005\041\006\032\007\033\020\uffd6\024\uffd6" +
    "\033\034\034\055\035\036\036\037\037\031\040\053\041" +
    "\047\042\054\043\050\044\051\045\045\001\002\000\004" +
    "\015\uffd8\001\002\000\006\020\uffef\024\uffef\001\002\000" +
    "\004\050\242\001\002\000\024\003\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\001" +
    "\002\000\004\015\243\001\002\000\004\011\244\001\002" +
    "\000\004\026\245\001\002\000\004\015\246\001\002\000" +
    "\004\011\247\001\002\000\024\003\uffca\010\uffca\015\uffca" +
    "\022\uffca\030\uffca\046\uffca\047\uffca\050\uffca\051\uffca\001" +
    "\002\000\004\004\251\001\002\000\004\027\252\001\002" +
    "\000\006\021\227\023\225\001\002\000\004\015\254\001" +
    "\002\000\004\011\255\001\002\000\024\003\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\001\002\000\004\004\257\001\002\000\004\027\260" +
    "\001\002\000\006\021\065\023\064\001\002\000\004\015" +
    "\262\001\002\000\004\011\263\001\002\000\024\003\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\001\002\000\004\004\265\001\002\000\004" +
    "\027\266\001\002\000\042\004\044\005\041\006\032\007" +
    "\033\015\uffd6\033\034\034\055\035\036\036\037\037\031" +
    "\040\053\041\047\042\054\043\050\044\051\045\045\001" +
    "\002\000\004\015\270\001\002\000\004\011\271\001\002" +
    "\000\024\003\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\001\002\000\024\003\ufff8" +
    "\010\ufff8\015\ufff8\022\ufff8\030\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\001\002\000\022\003\174\052\165\053\167" +
    "\054\166\055\173\056\172\057\175\060\171\001\002\000" +
    "\024\003\174\052\165\053\167\054\166\055\173\056\172" +
    "\057\175\060\171\061\275\001\002\000\004\046\276\001" +
    "\002\000\004\015\277\001\002\000\004\011\300\001\002" +
    "\000\004\026\301\001\002\000\004\015\302\001\002\000" +
    "\004\011\303\001\002\000\024\003\uffcc\010\uffcc\015\uffcc" +
    "\022\uffcc\030\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\001" +
    "\002\000\004\004\305\001\002\000\004\013\306\001\002" +
    "\000\004\004\307\001\002\000\004\016\310\001\002\000" +
    "\042\004\044\005\041\006\032\007\033\015\uffd6\033\034" +
    "\034\055\035\036\036\037\037\031\040\053\041\047\042" +
    "\054\043\050\044\051\045\045\001\002\000\004\015\312" +
    "\001\002\000\026\003\ufff6\010\ufff6\011\313\015\ufff6\022" +
    "\ufff6\030\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\001\002" +
    "\000\024\003\ufff7\010\ufff7\015\ufff7\022\ufff7\030\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\001\002\000\022\003\174" +
    "\052\165\053\167\054\166\055\173\056\172\057\175\060" +
    "\171\001\002\000\024\003\174\052\165\053\167\054\166" +
    "\055\173\056\172\057\175\060\171\061\316\001\002\000" +
    "\004\047\317\001\002\000\004\015\320\001\002\000\004" +
    "\011\321\001\002\000\004\026\322\001\002\000\004\015" +
    "\323\001\002\000\004\011\324\001\002\000\024\003\uffcb" +
    "\010\uffcb\015\uffcb\022\uffcb\030\uffcb\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\001\002\000\024\003\uffff\010\uffff\015\uffff" +
    "\022\uffff\030\uffff\046\uffff\047\uffff\050\uffff\051\uffff\001" +
    "\002\000\004\014\327\001\002\000\004\002\000\001\002" +
    "\000\022\003\174\052\165\053\167\054\166\055\173\056" +
    "\172\057\175\060\171\001\002\000\024\003\174\052\165" +
    "\053\167\054\166\055\173\056\172\057\175\060\171\061" +
    "\332\001\002\000\004\051\333\001\002\000\004\015\334" +
    "\001\002\000\004\011\335\001\002\000\004\026\336\001" +
    "\002\000\004\015\337\001\002\000\004\011\340\001\002" +
    "\000\024\003\uffc9\010\uffc9\015\uffc9\022\uffc9\030\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\001\002\000\004\004\342" +
    "\001\002\000\004\013\343\001\002\000\004\021\344\001" +
    "\002\000\004\004\345\001\002\000\004\016\346\001\002" +
    "\000\004\023\347\001\002\000\044\004\044\005\041\006" +
    "\032\007\033\020\uffd6\024\uffd6\033\034\034\055\035\036" +
    "\036\037\037\031\040\053\041\047\042\054\043\050\044" +
    "\051\045\045\001\002\000\006\020\140\024\351\001\002" +
    "\000\004\015\352\001\002\000\026\003\ufff4\010\ufff4\011" +
    "\353\015\ufff4\022\ufff4\030\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\001\002\000\024\003\ufff5\010\ufff5\015\ufff5\022" +
    "\ufff5\030\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\014\004\011\005\007\007\006\015\023\021\016" +
    "\026\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\014\005\324" +
    "\007\006\015\023\021\016\026\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\034\011\042\013\045\014\051\017\037\023\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\056\011\042\013" +
    "\045\014\051\017\037\023\041\001\001\000\002\001\001" +
    "\000\016\006\060\011\042\013\045\014\051\017\037\023" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\065\001\001\000\020\006\071\010\070\011\042\013" +
    "\045\014\051\017\037\023\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\074\011\042" +
    "\013\045\014\051\017\037\023\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\115\011\042\013\045\014\051\017\037\023\041\001\001" +
    "\000\002\001\001\000\016\006\117\011\042\013\045\014" +
    "\051\017\037\023\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\122\011\042\013\045\014\051\017" +
    "\037\023\041\001\001\000\002\001\001\000\016\006\124" +
    "\011\042\013\045\014\051\017\037\023\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\130\001\001" +
    "\000\020\006\135\011\042\013\045\014\051\017\037\023" +
    "\041\024\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\141\011\042" +
    "\013\045\014\051\017\037\023\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\143\011\042\013\045" +
    "\014\051\017\037\023\041\001\001\000\002\001\001\000" +
    "\016\006\145\011\042\013\045\014\051\017\037\023\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\150\011\042\013\045\014\051\017\037\023\041\001\001" +
    "\000\002\001\001\000\016\006\152\011\042\013\045\014" +
    "\051\017\037\023\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\156\011\042\013\045\014\051\016" +
    "\155\017\037\023\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\162\011\042\013\045\014\051\017" +
    "\037\023\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\167\030\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\210\011\042\013\045\014\051\017\037" +
    "\023\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\216\011\042\013\045\014\051\017\037\023\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\225\001" +
    "\001\000\020\006\232\011\042\013\045\014\051\017\037" +
    "\020\233\023\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\236\011" +
    "\042\013\045\014\051\017\037\023\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\266\011\042" +
    "\013\045\014\051\017\037\023\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\273\030\175\001\001\000\004\030\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\310\011\042\013" +
    "\045\014\051\017\037\023\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\314\030" +
    "\175\001\001\000\004\030\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\330\030\175\001\001\000\004\030\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\135\011\042\013\045\014\051\017\037\023\041\024" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        Util.errores.add(new Errores("SINTACTICO", s.left, s.right, s.value.toString()));   
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        Util.errores.add(new Errores("SINTACTICO", s.left, s.right, s.value.toString()));   
        System.err.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM declaraciones END PROGRAM 
            {
              Object RESULT =null;
		
    Util.imprimirVariables();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= sentencia_column 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= declaracion_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= declaracion_grafico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= error PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variable ::= VAR PUNTOS IDENTIFICADOR DOS_PUNTOS IDENTIFICADOR ASIGNACION valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    if (tipo.toString().toLowerCase().equals("double")) {
                    Variable var = new Variable("double",Double.valueOf(v.toString()));
                    Util.variables.put(id.toString(), var);
                    } else if (tipo.toString().toLowerCase().equals("char[]")) {
                            Variable var = new Variable("string",v.toString());
                            Util.variables.put(id.toString(), var); 
                        } else {
                            Util.errores.add(new Errores("SINTACTICO", tipoleft, tiporight, "Tipo de variable no reconocible")); 
                        }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_variable ::= VAR PUNTOS IDENTIFICADOR DOS_PUNTOS IDENTIFICADOR ASIGNACION valor END 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Util.errores.add(new Errores("SINTACTICO", tipoleft, vright, "Falto ';'")); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_array ::= ARR PUNTOS IDENTIFICADOR DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valores CLOSECORCHETE END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    if (tipo.toString().toLowerCase().equals("double")) {
                        ArrayList<Double> listaActual;
                        if (lista instanceof ArrayList) {
                            listaActual = (ArrayList<Double>) lista;
                        } else {
                            // Manejo de error o inicialización alternativa
                            listaActual = new ArrayList<Double>();
                        }
                        double[] array = new double[listaActual.size()];
                        for (int i = 0; i < listaActual.size(); i++) {
                            array[i] = listaActual.get(i);
                        }
                        Util.arrays.put(id.toString(), array);
                    } else if (tipo.toString().toLowerCase().equals("char[]"))  {
                        ArrayList<String> listaActual;
                        if (lista instanceof ArrayList) {
                            listaActual = (ArrayList<String>) lista;
                        } else {
                            // Manejo de error o inicialización alternativa
                            listaActual = new ArrayList<String>();
                        }
                        String[] array = new String[listaActual.size()];
                        for (int i = 0; i < listaActual.size(); i++) {
                            array[i] = listaActual.get(i);
                        }
                        Util.arrayChar.put(id.toString(), array);
                    } else {
                            Util.errores.add(new Errores("SINTACTICO \nTipo de variable no reconocible", tipoleft, tiporight, tipo.toString())); 
                        }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_array ::= ARR PUNTOS IDENTIFICADOR DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valores CLOSECORCHETE END 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                        Util.errores.add(new Errores("SINTACTICO", tipoleft, listaright, "Falto ';'")); 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_valores ::= lista_valores COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Object> listaActual = (ArrayList<Object>) lista;
                    listaActual.add(var);
                    RESULT = listaActual;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_valores ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Object> nuevaLista = new ArrayList<Object>();
                    nuevaLista.add(var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_valoresDouble ::= lista_valoresDouble COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Double> listaActual = (ArrayList<Double>) lista;
                    listaActual.add((Double) var); 
                    RESULT = listaActual; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresDouble",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_valoresDouble ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Double> nuevaLista = new ArrayList<Double>();
                    nuevaLista.add((Double) var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresDouble",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_valoresChar ::= lista_valoresChar COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<String> listaActual = (ArrayList<String>) lista;
                    listaActual.add((String) var); 
                    RESULT = listaActual; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresChar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_valoresChar ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<String> nuevaLista = new ArrayList<String>();
                    nuevaLista.add((String) var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresChar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia_print ::= CONSOLE DOS_PUNTOS PRINT IGUAL lista_expresiones END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Util.agregarTexto(text.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_print ::= CONSOLE DOS_PUNTOS PRINT IGUAL lista_expresiones END 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Util.errores.add(new Errores("SINTACTICO", textleft, textright, "Falto ';'"));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_expresiones ::= lista_expresiones COMA valor 
            {
              Object RESULT =null;
		int text1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int text1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object text1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int text2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int text2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object text2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = text1.toString() + ", " + text2.toString();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_expresiones ::= valor 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_column ::= CONSOLE DOS_PUNTOS COLUMN IGUAL valor ACCESO lista_expresionesColumn END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            System.out.println("ENTRO A IMPRESION ARRAYS");
                            Util.agregarTexto("-----------");
                            Util.agregarTexto(var.toString()); 
                            Util.agregarTexto("-----------");
                            if (arreglo instanceof double[]){
                                double[] temp = (double[]) arreglo;
                                for(double elemento : temp) {
                                    Util.agregarTexto(String.valueOf(elemento));  
                                }                                 
                            } else{ 
                                Object[] array = (Object[]) arreglo;
                                for(Object elemento : array) {
                                    Util.agregarTexto(elemento.toString()); 
                                } 
                            }   
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_column",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_column ::= CONSOLE DOS_PUNTOS COLUMN IGUAL valor ACCESO lista_expresionesColumn END 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Util.errores.add(new Errores("SINTACTICO \nFalto ';'",arregloleft, arregloright, "Falto ';'"));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_column",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_expresionesColumn ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            double[] nums = Util.arrays.get(id.toString());
                            String [] text = Util.arrayChar.get(id.toString());
                            if(nums != null){
                                RESULT = nums;
                            } else if(text != null) {
                                RESULT = text;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresionesColumn",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_expresionesColumn ::= OPENCORCHETE lista_valores CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            ArrayList<Object> listaActual;
                            if (lista instanceof ArrayList) {
                                listaActual = (ArrayList<Object>) lista;
                            } else {
                                // Manejo de error o inicialización alternativa
                                listaActual = new ArrayList<Object>();
                            }
                            Object[] array = new Object[listaActual.size()];
                            for (int i = 0; i < listaActual.size(); i++) {
                                array[i] = listaActual.get(i);
                            }
                            RESULT = array;                
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresionesColumn",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_arit ::= SUMA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() + ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion_arit ::= RESTA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() - ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion_arit ::= MULT OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() * ((Double)num2).doubleValue());
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion_arit ::= DIV OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() / ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion_arit ::= MOD OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() % ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion_estadistica ::= MEDIA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double media = Estadistica.media(array);
                        RESULT = media;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion_estadistica ::= MEDIANA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double mediana = Estadistica.mediana(array);
                        RESULT = mediana;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion_estadistica ::= MODA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double moda = Estadistica.moda(array);
                        RESULT = moda;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcion_estadistica ::= VARIANZA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double varianza = Estadistica.varianza(array);
                        RESULT = varianza;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcion_estadistica ::= MAX OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double max = Estadistica.max(array);
                        RESULT = max;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcion_estadistica ::= MIN OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double min = Estadistica.min(array);
                        RESULT = min;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arreglo_double ::= OPENCORCHETE lista_valoresDouble CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arreglo_double ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    double[] array = Util.arrays.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arreglo_char ::= OPENCORCHETE lista_valoresChar CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<String> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<String>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<String>();
                    }
                    String[] array = new String[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arreglo_char ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    String[] array = Util.arrayChar.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= valor_double 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(n.toString()); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= valor_string 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = var;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor_double ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = Double.valueOf(n.toString()); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(d.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valor_double ::= operacion_arit 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valor_double ::= funcion_estadistica 
            {
              Object RESULT =null;
		int estleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int estright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object est = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = est; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valor_string ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Variable var = Util.variables.get(id.toString());
                if (var != null) {
                    RESULT = var.getValor();
                } else {
                    System.out.println("Variable no encontrada");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_grafico ::= GBAR OPENPAREN sentencia_grafico EXEC GBAR END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int grafleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int grafright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object graf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                        System.out.println("ENTRO A BAR SINTAC");
                        try {
                            String titulo = Util.atributesGraph.get("Titulo").toString();
                            String [] ejex = (String[]) Util.atributesGraph.get("ejex");
                            double [] ejey = (double[]) Util.atributesGraph.get("ejey");
                            String titulox = Util.atributesGraph.get("Titulox").toString();
                            String tituloy = Util.atributesGraph.get("Tituloy").toString();
                            Graficar.grafica_barras(titulo, ejex, ejey, titulox, tituloy);
                        } catch (NullPointerException e) {
                            System.out.println("ERROR GRAFICO");
                            Util.errores.add(new Errores("SINTACTICO", grafleft, grafright, "Falto atributo de la grafica \nde barras")); 
                        }
                        Util.atributesGraph.clear();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_grafico ::= GPIE OPENPAREN sentencia_grafico EXEC GPIE END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int grafleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int grafright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object graf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                    System.out.println("ENTRO A PIE SINTAC");
                        try {
                            String titulo = Util.atributesGraph.get("Titulo").toString();
                            double[] values = (double[]) Util.atributesGraph.get("values");
                            String [] labels = (String[]) Util.atributesGraph.get("labels");
                            Graficar.graficar_pie(titulo, values, labels);
                        } catch (NullPointerException e) {
                            System.out.println("ERROR GRAFICO");
                            Util.errores.add(new Errores("SINTACTICO", grafleft, grafright, "Falto atributo de la grafica \nde pie")); 
                        }
                        Util.atributesGraph.clear();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_grafico ::= GLINE OPENPAREN sentencia_grafico EXEC GLINE END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int grafleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int grafright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object graf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                        try {
                            String titulo = Util.atributesGraph.get("Titulo").toString();
                            String [] ejex = (String[]) Util.atributesGraph.get("ejex");
                            double [] ejey = (double[]) Util.atributesGraph.get("ejey");
                            String titulox = Util.atributesGraph.get("Titulox").toString();
                            String tituloy = Util.atributesGraph.get("Tituloy").toString();
                            Graficar.grafica_linea(titulo, ejex, ejey, titulox, tituloy);
                        } catch (NullPointerException e) {
                            System.out.println("ERROR GRAFICO");
                            Util.errores.add(new Errores("SINTACTICO", grafleft, grafright, "Falto atributo de la grafica \nde linea")); 
                        }
                        Util.atributesGraph.clear();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_grafico ::= GHISTOGRAM OPENPAREN sentencia_grafico EXEC GHISTOGRAM END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int grafleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int grafright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object graf = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
                        try {
                            String titulo = Util.atributesGraph.get("Titulo").toString();   
                            double[] values = (double[]) Util.atributesGraph.get("values");
                            Graficar.grafica_histograma(titulo, values);
                        } catch (NullPointerException e) {
                            System.out.println("ERROR GRAFICO");
                            Util.errores.add(new Errores("SINTACTICO", grafleft, grafright, "Falto atributo de la grafica \nhistograma")); 
                        }
                        Util.atributesGraph.clear();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_grafico ::= sentencia_grafico atributosGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafico",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia_grafico ::= atributosGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafico",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atributosGraph ::= TITULO DOS_PUNTOS IDENTIFICADOR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Util.atributesGraph.put("Titulo",titulo.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributosGraph ::= EJEX DOS_PUNTOS IDENTIFICADOR IGUAL arreglo_char END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ejex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String[] array = (String[]) ejex;
                    Util.atributesGraph.put("ejex",array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributosGraph ::= EJEY DOS_PUNTOS IDENTIFICADOR IGUAL arreglo_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ejey = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 double[] array = (double[]) ejey;
                    Util.atributesGraph.put("ejey",array);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributosGraph ::= TITULOX DOS_PUNTOS IDENTIFICADOR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulox = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Util.atributesGraph.put("Titulox",titulox.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atributosGraph ::= TITULOY DOS_PUNTOS IDENTIFICADOR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tituloy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Util.atributesGraph.put("Tituloy",tituloy.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributosGraph ::= LABEL DOS_PUNTOS IDENTIFICADOR IGUAL arreglo_char END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int labelsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int labelsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object labels = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String[] array = (String[]) labels;
                    Util.atributesGraph.put("labels",array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributosGraph ::= VALUES DOS_PUNTOS IDENTIFICADOR IGUAL arreglo_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 double[] array = (double[]) values;
                    Util.atributesGraph.put("values",array);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atributosGraph ::= error PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
