package Analizadores;
import java_cup.runtime.*;
import java.util.HashMap;
import Analizadores.Objetos.ConEjecucion;
import Analizadores.Objetos.Errores;
import java.util.ArrayList;
import java.util.Arrays;

parser code 
{:
    public void syntax_error(Symbol s){
        ConEjecucion.errores.add(new Errores("SINTACTICO", s.left, s.right, s.value.toString()));   
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
:}

terminal IDENTIFICADOR, NUMERO, CADENA, DECIMAL;
terminal VAR, PUNTO_Y_COMA, PUNTOS, DOS_PUNTOS, DOUBLE, CHAR, PROGRAM, END, ASIGNACION;
terminal COMA, ARROBA, ARR, OPENCORCHETE, CLOSECORCHETE, OPENPAREN, CLOSEPAREN, IGUAL, CONSOLE, PRINT;
terminal SUMA, RESTA, MULT, DIV, MOD, MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;

non terminal inicio, declaracion_variable, declaraciones, sentencia, valor, declaracion_array, lista_valoresDouble, operacion_arit;
non terminal arreglo_double, valor_double, valor_string, sentencia_print, lista_expresiones, funcion_estadistica, valor_print;
non terminal lista_valoresChar;

//Estructura principal del programa

start with inicio;

inicio ::= PROGRAM declaraciones END PROGRAM
{:
    ConEjecucion.imprimirVariables();
:}
;

declaraciones ::= declaraciones sentencia
                | sentencia
;

sentencia ::= declaracion_variable
                | sentencia_print
                | declaracion_array
;

declaracion_variable ::= VAR PUNTOS DOUBLE DOS_PUNTOS IDENTIFICADOR:id ASIGNACION valor_double:v END PUNTO_Y_COMA
                {: ConEjecucion.variablesDouble.put(id.toString(), Double.valueOf(v.toString())); :}   
    
                | VAR PUNTOS CHAR DOS_PUNTOS IDENTIFICADOR:id ASIGNACION valor_string:v END PUNTO_Y_COMA
                     {: ConEjecucion.variablesChar.put(id.toString(), v.toString()); :} 
;

declaracion_array ::= ARR PUNTOS DOUBLE DOS_PUNTOS ARROBA IDENTIFICADOR:id ASIGNACION OPENCORCHETE lista_valoresDouble:lista CLOSECORCHETE END PUNTO_Y_COMA
                {:
                    // Casting seguro a ArrayList<Double>
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    ConEjecucion.arrays.put(id.toString(), array);
                :}
    | ARR PUNTOS CHAR DOS_PUNTOS ARROBA IDENTIFICADOR:id ASIGNACION OPENCORCHETE lista_valoresChar:lista CLOSECORCHETE END PUNTO_Y_COMA
                {:
                    ArrayList<String> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<String>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<String>();
                    }
                    String[] array = new String[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    ConEjecucion.arrayChar.put(id.toString(), array);                    
                :}
;

lista_valoresDouble ::= lista_valoresDouble:lista COMA valor_double:var {:
                    ArrayList<Double> listaActual = (ArrayList<Double>) lista;
                    listaActual.add((Double) var); 
                    RESULT = listaActual; 
                :}
                | valor_double:var 
                {:
                    ArrayList<Double> nuevaLista = new ArrayList<Double>();
                    nuevaLista.add((Double) var);
                    RESULT = nuevaLista;
                :}
;

lista_valoresChar ::= lista_valoresChar:lista COMA valor_string:var {:
                    ArrayList<String> listaActual = (ArrayList<String>) lista;
                    listaActual.add((String) var); 
                    RESULT = listaActual; 
                :}
                | valor_string:var 
                {:
                    ArrayList<String> nuevaLista = new ArrayList<String>();
                    nuevaLista.add((String) var);
                    RESULT = nuevaLista;
                :}
;

sentencia_print ::= CONSOLE DOS_PUNTOS PRINT IGUAL lista_expresiones:text END PUNTO_Y_COMA {:
                    System.out.println("Salida: "+text.toString());
                :}
;

lista_expresiones ::= lista_expresiones:text1 COMA valor_print:text2 {:
                        RESULT = text1.toString() + ", " + text2.toString();
                        :}
                    | valor_print:text   {: RESULT = text.toString(); :}
;


operacion_arit ::=
      SUMA OPENPAREN valor_double:num1 COMA valor_double:num2 CLOSEPAREN 
      {: 
          RESULT = new Double(((Double)num1).doubleValue() + ((Double)num2).doubleValue()); 
      :}
    | RESTA OPENPAREN valor_double:num1 COMA valor_double:num2 CLOSEPAREN 
      {: 
          RESULT = new Double(((Double)num1).doubleValue() - ((Double)num2).doubleValue()); 
      :}
    | MULT OPENPAREN valor_double:num1 COMA valor_double:num2 CLOSEPAREN 
      {: 
          RESULT = new Double(((Double)num1).doubleValue() * ((Double)num2).doubleValue()); 
      :}
    | DIV OPENPAREN valor_double:num1 COMA valor_double:num2 CLOSEPAREN 
      {: 
          // Asegúrate de manejar la división por cero aquí.
          RESULT = new Double(((Double)num1).doubleValue() / ((Double)num2).doubleValue()); 
      :}
    | MOD OPENPAREN valor_double:num1 COMA valor_double:num2 CLOSEPAREN 
      {: 
          RESULT = new Double(((Double)num1).doubleValue() % ((Double)num2).doubleValue()); 
      :}
;


funcion_estadistica ::= MEDIA OPENPAREN arreglo_double:arreglo CLOSEPAREN 
                    {:
                        double[] array = (double[]) arreglo;
                        double media = 0;
                        for (int i=0; i < array.length; i++) {
                            media = media + array[i];
                        }
                        media = media / array.length;
                        RESULT = media;
                    :}
                 | MEDIANA OPENPAREN arreglo_double:arreglo CLOSEPAREN
                    {:
                        double[] array = (double[]) arreglo;
                        Arrays.sort(array);
                        int n = array.length;
                        double mediana;
                        if (n % 2 != 0) {
                            mediana =  array[n/2];
                            RESULT = mediana;
                        } else {
                                mediana = (array[(n-1)/2] + array[n/2]) / 2.0;
                                RESULT = mediana;
                            }
                    :}
                 | MODA OPENPAREN arreglo_double:arreglo CLOSEPAREN
                 | VARIANZA OPENPAREN arreglo_double:arreglo CLOSEPAREN
                 | MAX OPENPAREN arreglo_double:arreglo CLOSEPAREN
                 | MIN OPENPAREN arreglo_double:arreglo CLOSEPAREN
                 ;

arreglo_double ::= OPENCORCHETE lista_valoresDouble:lista CLOSECORCHETE {:
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                :}
                 | ARROBA IDENTIFICADOR:id  {:
                    double[] array = ConEjecucion.arrays.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 :}
;

valor ::= |valor_double:n {:
                    RESULT = Double.valueOf(n.toString()); 
                    :}
        | valor_string:c  {:
                    RESULT = c.toString();
                    :}

;

valor_print ::= NUMERO:n   {: 
                    RESULT = Double.valueOf(n.toString()); 
                :}
                | DECIMAL:d  {:
                    RESULT = Double.valueOf(d.toString());
                :}
                | CADENA:c   {:
                    RESULT = c.toString();
                    :}
                | IDENTIFICADOR:id  {:
                    Double num = ConEjecucion.variablesDouble.get(id.toString());
                    String str = ConEjecucion.variablesChar.get(id.toString());
                    if (str == null && num == null) {
                        // Manejo de error: variable no definida.
                        throw new Exception("Variable no definida: " + id.toString());
                    } else if(num != null){
                        RESULT = num;
                        } else if(str != null){
                            RESULT = str;
                            }
                    :}

;

valor_double ::= NUMERO:n   {: 
                    RESULT = Double.valueOf(n.toString()); 
                :}
                | DECIMAL:d  {:
                    RESULT = Double.valueOf(d.toString());
                :}
                | operacion_arit:op {: RESULT = op; :}
                | funcion_estadistica:est {: RESULT = est; :}
                | IDENTIFICADOR:id  {:
                    Double num = ConEjecucion.variablesDouble.get(id.toString());
                    if (num == null) {
                        // Manejo de error: variable no definida.
                        throw new Exception("Variable no definida: " + id.toString());
                    } else {
                        RESULT = num;
                        } 
                    :}
;

valor_string ::= CADENA:c   {:
                    RESULT = c.toString();
                    :}
;