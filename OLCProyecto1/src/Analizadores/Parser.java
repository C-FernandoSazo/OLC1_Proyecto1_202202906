
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Analizadores.Objetos.Util;
import Analizadores.Objetos.Errores;
import Analizadores.Objetos.Variable;
import java.util.ArrayList;
import Operaciones.Graficar;
import Operaciones.Estadistica;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\006\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\003\013\000\002\003\013\000\002\007\016\000\002" +
    "\007\016\000\002\024\005\000\002\024\003\000\002\010" +
    "\005\000\002\010\003\000\002\020\005\000\002\020\003" +
    "\000\002\015\011\000\002\016\005\000\002\016\003\000" +
    "\002\021\013\000\002\022\004\000\002\022\005\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\012\005\000\002\012\004\000\002" +
    "\025\005\000\002\025\004\000\002\006\002\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\023\003\000\002\026\014\000\002" +
    "\026\014\000\002\026\014\000\002\026\014\000\002\027" +
    "\004\000\002\027\003\000\002\030\011\000\002\030\011" +
    "\000\002\030\011\000\002\030\011\000\002\030\011\000" +
    "\002\030\011\000\002\030\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\016\005\001\002\000\004\002\371\001" +
    "\002\000\020\010\014\024\006\032\022\050\017\051\013" +
    "\052\021\053\011\001\002\000\004\012\344\001\002\000" +
    "\022\010\ufffb\017\ufffb\024\ufffb\032\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\001\002\000\022\010\ufffe\017\ufffe\024" +
    "\ufffe\032\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\001\002" +
    "\000\004\027\333\001\002\000\022\010\014\017\331\024" +
    "\006\032\022\050\017\051\013\052\021\053\011\001\002" +
    "\000\004\027\317\001\002\000\004\012\300\001\002\000" +
    "\022\010\ufffd\017\ufffd\024\ufffd\032\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\001\002\000\022\010\ufffa\017\ufffa\024" +
    "\ufffa\032\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002" +
    "\000\004\027\267\001\002\000\022\010\ufff9\017\ufff9\024" +
    "\ufff9\032\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002" +
    "\000\004\027\163\001\002\000\004\013\024\001\002\000" +
    "\022\010\ufffc\017\ufffc\024\ufffc\032\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\001\002\000\006\033\025\034\026\001" +
    "\002\000\004\031\154\001\002\000\004\031\027\001\002" +
    "\000\042\004\042\005\040\006\031\007\032\021\uffd9\035" +
    "\033\036\054\037\035\040\036\041\030\042\052\043\046" +
    "\044\053\045\047\046\051\047\044\001\002\000\004\027" +
    "\147\001\002\000\014\017\uffd1\021\uffd1\022\uffd1\026\uffd1" +
    "\030\uffd1\001\002\000\014\017\uffd4\021\uffd4\022\uffd4\026" +
    "\uffd4\030\uffd4\001\002\000\004\027\142\001\002\000\004" +
    "\021\126\001\002\000\004\027\121\001\002\000\004\027" +
    "\114\001\002\000\014\017\uffd2\021\uffd2\022\uffd2\026\uffd2" +
    "\030\uffd2\001\002\000\014\017\uffd5\021\uffd5\022\uffd5\026" +
    "\uffd5\030\uffd5\001\002\000\014\017\uffd6\021\uffd6\022\uffd6" +
    "\026\uffd6\030\uffd6\001\002\000\014\017\uffd0\021\uffd0\022" +
    "\uffd0\026\uffd0\030\uffd0\001\002\000\014\017\uffd3\021\uffd3" +
    "\022\uffd3\026\uffd3\030\uffd3\001\002\000\004\027\111\001" +
    "\002\000\014\017\uffd8\021\uffd8\022\uffd8\026\uffd8\030\uffd8" +
    "\001\002\000\004\027\106\001\002\000\004\027\103\001" +
    "\002\000\014\017\uffd7\021\uffd7\022\uffd7\026\uffd7\030\uffd7" +
    "\001\002\000\004\027\100\001\002\000\004\027\075\001" +
    "\002\000\004\027\062\001\002\000\004\027\055\001\002" +
    "\000\042\004\042\005\040\006\031\007\032\022\uffd9\035" +
    "\033\036\054\037\035\040\036\041\030\042\052\043\046" +
    "\044\053\045\047\046\051\047\044\001\002\000\004\022" +
    "\057\001\002\000\042\004\042\005\040\006\031\007\032" +
    "\030\uffd9\035\033\036\054\037\035\040\036\041\030\042" +
    "\052\043\046\044\053\045\047\046\051\047\044\001\002" +
    "\000\004\030\061\001\002\000\014\017\uffe7\021\uffe7\022" +
    "\uffe7\026\uffe7\030\uffe7\001\002\000\006\023\064\025\063" +
    "\001\002\000\044\004\042\005\040\006\031\007\032\022" +
    "\uffd9\026\uffd9\035\033\036\054\037\035\040\036\041\030" +
    "\042\052\043\046\044\053\045\047\046\051\047\044\001" +
    "\002\000\004\004\067\001\002\000\004\030\066\001\002" +
    "\000\014\017\uffe1\021\uffe1\022\uffe1\026\uffe1\030\uffe1\001" +
    "\002\000\006\017\uffdc\030\uffdc\001\002\000\006\022\072" +
    "\026\073\001\002\000\006\022\ufff1\026\ufff1\001\002\000" +
    "\044\004\042\005\040\006\031\007\032\022\uffd9\026\uffd9" +
    "\035\033\036\054\037\035\040\036\041\030\042\052\043" +
    "\046\044\053\045\047\046\051\047\044\001\002\000\006" +
    "\017\uffdd\030\uffdd\001\002\000\006\022\ufff2\026\ufff2\001" +
    "\002\000\006\023\064\025\063\001\002\000\004\030\077" +
    "\001\002\000\014\017\uffe3\021\uffe3\022\uffe3\026\uffe3\030" +
    "\uffe3\001\002\000\006\023\064\025\063\001\002\000\004" +
    "\030\102\001\002\000\014\017\uffdf\021\uffdf\022\uffdf\026" +
    "\uffdf\030\uffdf\001\002\000\006\023\064\025\063\001\002" +
    "\000\004\030\105\001\002\000\014\017\uffe0\021\uffe0\022" +
    "\uffe0\026\uffe0\030\uffe0\001\002\000\006\023\064\025\063" +
    "\001\002\000\004\030\110\001\002\000\014\017\uffe2\021" +
    "\uffe2\022\uffe2\026\uffe2\030\uffe2\001\002\000\006\023\064" +
    "\025\063\001\002\000\004\030\113\001\002\000\014\017" +
    "\uffde\021\uffde\022\uffde\026\uffde\030\uffde\001\002\000\042" +
    "\004\042\005\040\006\031\007\032\022\uffd9\035\033\036" +
    "\054\037\035\040\036\041\030\042\052\043\046\044\053" +
    "\045\047\046\051\047\044\001\002\000\004\022\116\001" +
    "\002\000\042\004\042\005\040\006\031\007\032\030\uffd9" +
    "\035\033\036\054\037\035\040\036\041\030\042\052\043" +
    "\046\044\053\045\047\046\051\047\044\001\002\000\004" +
    "\030\120\001\002\000\014\017\uffe5\021\uffe5\022\uffe5\026" +
    "\uffe5\030\uffe5\001\002\000\042\004\042\005\040\006\031" +
    "\007\032\022\uffd9\035\033\036\054\037\035\040\036\041" +
    "\030\042\052\043\046\044\053\045\047\046\051\047\044" +
    "\001\002\000\004\022\123\001\002\000\042\004\042\005" +
    "\040\006\031\007\032\030\uffd9\035\033\036\054\037\035" +
    "\040\036\041\030\042\052\043\046\044\053\045\047\046" +
    "\051\047\044\001\002\000\004\030\125\001\002\000\014" +
    "\017\uffe6\021\uffe6\022\uffe6\026\uffe6\030\uffe6\001\002\000" +
    "\006\023\131\025\127\001\002\000\044\004\042\005\040" +
    "\006\031\007\032\022\uffd9\026\uffd9\035\033\036\054\037" +
    "\035\040\036\041\030\042\052\043\046\044\053\045\047" +
    "\046\051\047\044\001\002\000\004\017\133\001\002\000" +
    "\004\004\132\001\002\000\004\017\uffea\001\002\000\004" +
    "\011\134\001\002\000\022\010\uffeb\017\uffeb\024\uffeb\032" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\006" +
    "\022\ufff3\026\ufff3\001\002\000\006\022\137\026\140\001" +
    "\002\000\044\004\042\005\040\006\031\007\032\022\uffd9" +
    "\026\uffd9\035\033\036\054\037\035\040\036\041\030\042" +
    "\052\043\046\044\053\045\047\046\051\047\044\001\002" +
    "\000\004\017\uffe9\001\002\000\006\022\ufff4\026\ufff4\001" +
    "\002\000\042\004\042\005\040\006\031\007\032\022\uffd9" +
    "\035\033\036\054\037\035\040\036\041\030\042\052\043" +
    "\046\044\053\045\047\046\051\047\044\001\002\000\004" +
    "\022\144\001\002\000\042\004\042\005\040\006\031\007" +
    "\032\030\uffd9\035\033\036\054\037\035\040\036\041\030" +
    "\042\052\043\046\044\053\045\047\046\051\047\044\001" +
    "\002\000\004\030\146\001\002\000\014\017\uffe8\021\uffe8" +
    "\022\uffe8\026\uffe8\030\uffe8\001\002\000\042\004\042\005" +
    "\040\006\031\007\032\022\uffd9\035\033\036\054\037\035" +
    "\040\036\041\030\042\052\043\046\044\053\045\047\046" +
    "\051\047\044\001\002\000\004\022\151\001\002\000\042" +
    "\004\042\005\040\006\031\007\032\030\uffd9\035\033\036" +
    "\054\037\035\040\036\041\030\042\052\043\046\044\053" +
    "\045\047\046\051\047\044\001\002\000\004\030\153\001" +
    "\002\000\014\017\uffe4\021\uffe4\022\uffe4\026\uffe4\030\uffe4" +
    "\001\002\000\044\004\042\005\040\006\031\007\032\017" +
    "\uffd9\022\uffd9\035\033\036\054\037\035\040\036\041\030" +
    "\042\052\043\046\044\053\045\047\046\051\047\044\001" +
    "\002\000\006\017\160\022\157\001\002\000\006\017\uffec" +
    "\022\uffec\001\002\000\044\004\042\005\040\006\031\007" +
    "\032\017\uffd9\022\uffd9\035\033\036\054\037\035\040\036" +
    "\041\030\042\052\043\046\044\053\045\047\046\051\047" +
    "\044\001\002\000\004\011\161\001\002\000\022\010\uffee" +
    "\017\uffee\024\uffee\032\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\001\002\000\006\017\uffed\022\uffed\001\002\000\020" +
    "\054\164\055\166\056\165\057\172\060\171\061\173\062" +
    "\170\001\002\000\004\013\261\001\002\000\004\013\253" +
    "\001\002\000\004\013\245\001\002\000\022\054\164\055" +
    "\166\056\165\057\172\060\171\061\173\062\170\063\235" +
    "\001\002\000\004\013\217\001\002\000\004\013\211\001" +
    "\002\000\004\013\203\001\002\000\004\013\175\001\002" +
    "\000\022\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\001\002\000\004\014\176\001\002" +
    "\000\004\031\177\001\002\000\006\023\064\025\063\001" +
    "\002\000\004\017\201\001\002\000\004\011\202\001\002" +
    "\000\022\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\001\002\000\004\015\204\001\002" +
    "\000\004\031\205\001\002\000\042\004\042\005\040\006" +
    "\031\007\032\017\uffd9\035\033\036\054\037\035\040\036" +
    "\041\030\042\052\043\046\044\053\045\047\046\051\047" +
    "\044\001\002\000\004\017\207\001\002\000\004\011\210" +
    "\001\002\000\022\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002\000\004\015\212" +
    "\001\002\000\004\031\213\001\002\000\042\004\042\005" +
    "\040\006\031\007\032\017\uffd9\035\033\036\054\037\035" +
    "\040\036\041\030\042\052\043\046\044\053\045\047\046" +
    "\051\047\044\001\002\000\004\017\215\001\002\000\004" +
    "\011\216\001\002\000\022\054\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\004" +
    "\015\220\001\002\000\004\031\221\001\002\000\006\023" +
    "\224\025\222\001\002\000\044\004\042\005\040\006\031" +
    "\007\032\022\uffd9\026\uffd9\035\033\036\054\037\035\040" +
    "\036\041\030\042\052\043\046\044\053\045\047\046\051" +
    "\047\044\001\002\000\004\017\226\001\002\000\004\004" +
    "\225\001\002\000\004\017\uffda\001\002\000\004\011\227" +
    "\001\002\000\022\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000\006\022\uffef" +
    "\026\uffef\001\002\000\006\022\232\026\233\001\002\000" +
    "\044\004\042\005\040\006\031\007\032\022\uffd9\026\uffd9" +
    "\035\033\036\054\037\035\040\036\041\030\042\052\043" +
    "\046\044\053\045\047\046\051\047\044\001\002\000\004" +
    "\017\uffdb\001\002\000\006\022\ufff0\026\ufff0\001\002\000" +
    "\004\052\237\001\002\000\022\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\001\002\000" +
    "\004\017\240\001\002\000\004\011\241\001\002\000\004" +
    "\030\242\001\002\000\004\017\243\001\002\000\004\011" +
    "\244\001\002\000\022\010\uffcd\017\uffcd\024\uffcd\032\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002\000\004\015" +
    "\246\001\002\000\004\031\247\001\002\000\006\023\224" +
    "\025\222\001\002\000\004\017\251\001\002\000\004\011" +
    "\252\001\002\000\022\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\063\uffc8\001\002\000\004\014" +
    "\254\001\002\000\004\031\255\001\002\000\006\023\064" +
    "\025\063\001\002\000\004\017\257\001\002\000\004\011" +
    "\260\001\002\000\022\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002\000\004\015" +
    "\262\001\002\000\004\031\263\001\002\000\042\004\042" +
    "\005\040\006\031\007\032\017\uffd9\035\033\036\054\037" +
    "\035\040\036\041\030\042\052\043\046\044\053\045\047" +
    "\046\051\047\044\001\002\000\004\017\265\001\002\000" +
    "\004\011\266\001\002\000\022\054\uffc9\055\uffc9\056\uffc9" +
    "\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\001\002\000" +
    "\020\054\164\055\166\056\165\057\172\060\171\061\173" +
    "\062\170\001\002\000\022\054\164\055\166\056\165\057" +
    "\172\060\171\061\173\062\170\063\271\001\002\000\004" +
    "\050\272\001\002\000\004\017\273\001\002\000\004\011" +
    "\274\001\002\000\004\030\275\001\002\000\004\017\276" +
    "\001\002\000\004\011\277\001\002\000\022\010\uffcf\017" +
    "\uffcf\024\uffcf\032\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\001\002\000\006\014\301\015\302\001\002\000\004\013" +
    "\311\001\002\000\004\013\303\001\002\000\004\004\304" +
    "\001\002\000\004\020\305\001\002\000\004\006\031\001" +
    "\002\000\004\017\307\001\002\000\004\011\310\001\002" +
    "\000\022\010\ufff7\017\ufff7\024\ufff7\032\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\001\002\000\004\004\312\001\002" +
    "\000\004\020\313\001\002\000\034\005\040\007\032\035" +
    "\033\036\054\037\035\040\036\041\030\042\052\043\046" +
    "\044\053\045\047\046\051\047\044\001\002\000\004\017" +
    "\315\001\002\000\004\011\316\001\002\000\022\010\ufff8" +
    "\017\ufff8\024\ufff8\032\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\001\002\000\020\054\164\055\166\056\165\057\172" +
    "\060\171\061\173\062\170\001\002\000\022\054\164\055" +
    "\166\056\165\057\172\060\171\061\173\062\170\063\321" +
    "\001\002\000\004\051\322\001\002\000\004\017\323\001" +
    "\002\000\004\011\324\001\002\000\004\030\325\001\002" +
    "\000\004\017\326\001\002\000\004\011\327\001\002\000" +
    "\022\010\uffce\017\uffce\024\uffce\032\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\001\002\000\022\010\uffff\017\uffff\024" +
    "\uffff\032\uffff\050\uffff\051\uffff\052\uffff\053\uffff\001\002" +
    "\000\004\016\332\001\002\000\004\002\000\001\002\000" +
    "\020\054\164\055\166\056\165\057\172\060\171\061\173" +
    "\062\170\001\002\000\022\054\164\055\166\056\165\057" +
    "\172\060\171\061\173\062\170\063\335\001\002\000\004" +
    "\053\336\001\002\000\004\017\337\001\002\000\004\011" +
    "\340\001\002\000\004\030\341\001\002\000\004\017\342" +
    "\001\002\000\004\011\343\001\002\000\022\010\uffcc\017" +
    "\uffcc\024\uffcc\032\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\001\002\000\006\014\345\015\346\001\002\000\004\013" +
    "\360\001\002\000\004\013\347\001\002\000\004\023\350" +
    "\001\002\000\004\004\351\001\002\000\004\020\352\001" +
    "\002\000\004\025\353\001\002\000\044\004\042\005\040" +
    "\006\031\007\032\022\uffd9\026\uffd9\035\033\036\054\037" +
    "\035\040\036\041\030\042\052\043\046\044\053\045\047" +
    "\046\051\047\044\001\002\000\006\022\232\026\355\001" +
    "\002\000\004\017\356\001\002\000\004\011\357\001\002" +
    "\000\022\010\ufff5\017\ufff5\024\ufff5\032\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\001\002\000\004\023\361\001\002" +
    "\000\004\004\362\001\002\000\004\020\363\001\002\000" +
    "\004\025\364\001\002\000\044\004\042\005\040\006\031" +
    "\007\032\022\uffd9\026\uffd9\035\033\036\054\037\035\040" +
    "\036\041\030\042\052\043\046\044\053\045\047\046\051" +
    "\047\044\001\002\000\006\022\072\026\366\001\002\000" +
    "\004\017\367\001\002\000\004\011\370\001\002\000\022" +
    "\010\ufff6\017\ufff6\024\ufff6\032\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\014\004\011\005\007\007\006\015\022\021\015" +
    "\026\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\014\005\327" +
    "\007\006\015\022\021\015\026\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\033\011\042\013" +
    "\044\014\047\017\036\023\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\055\011\042\013\044\014\047\017" +
    "\036\023\040\001\001\000\002\001\001\000\016\006\057" +
    "\011\042\013\044\014\047\017\036\023\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\064\001\001" +
    "\000\020\006\070\010\067\011\042\013\044\014\047\017" +
    "\036\023\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\073\011\042\013\044\014\047" +
    "\017\036\023\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\114\011\042\013" +
    "\044\014\047\017\036\023\040\001\001\000\002\001\001" +
    "\000\016\006\116\011\042\013\044\014\047\017\036\023" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\121\011\042\013\044\014\047\017\036\023\040\001" +
    "\001\000\002\001\001\000\016\006\123\011\042\013\044" +
    "\014\047\017\036\023\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\127\001\001\000\020\006\134" +
    "\011\042\013\044\014\047\017\036\023\040\024\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\140\011\042\013\044\014\047" +
    "\017\036\023\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\142\011\042\013\044\014\047\017\036" +
    "\023\040\001\001\000\002\001\001\000\016\006\144\011" +
    "\042\013\044\014\047\017\036\023\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\147\011\042\013" +
    "\044\014\047\017\036\023\040\001\001\000\002\001\001" +
    "\000\016\006\151\011\042\013\044\014\047\017\036\023" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\155\011\042\013\044\014\047\016\154\017\036\023" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\161\011\042\013\044\014\047\017\036\023\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\166\030\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\205\011\042\013\044\014\047\017" +
    "\036\023\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\213\011\042\013\044\014\047\017\036\023\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\222" +
    "\001\001\000\020\006\227\011\042\013\044\014\047\017" +
    "\036\020\230\023\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\233" +
    "\011\042\013\044\014\047\017\036\023\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\263\011" +
    "\042\013\044\014\047\017\036\023\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\267\030\173\001\001\000\004\030\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\042\013\313" +
    "\017\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\317\030\173\001\001\000\004" +
    "\030\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\333\030\173\001\001" +
    "\000\004\030\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\227\011\042\013\044\014\047\017\036\020\353\023\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\070\010" +
    "\364\011\042\013\044\014\047\017\036\023\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        Util.errores.add(new Errores("SINTACTICO", s.left, s.right, s.value.toString()));   
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM declaraciones END PROGRAM 
            {
              Object RESULT =null;
		
    Util.imprimirVariables();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= declaracion_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= sentencia_column 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= declaracion_grafico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_variable ::= VAR PUNTOS DOUBLE DOS_PUNTOS IDENTIFICADOR ASIGNACION valor_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    Variable var = new Variable("double",Double.valueOf(v.toString()));
                    Util.variables.put(id.toString(), var); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variable ::= VAR PUNTOS CHAR DOS_PUNTOS IDENTIFICADOR ASIGNACION valor_string END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    Variable var = new Variable("string",v.toString());
                    Util.variables.put(id.toString(), var); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_array ::= ARR PUNTOS DOUBLE DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valoresDouble CLOSECORCHETE END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    // Casting seguro a ArrayList<Double>
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    Util.arrays.put(id.toString(), array);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_array ::= ARR PUNTOS CHAR DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valoresChar CLOSECORCHETE END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    ArrayList<String> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<String>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<String>();
                    }
                    String[] array = new String[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    Util.arrayChar.put(id.toString(), array);                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_valores ::= lista_valores COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Object> listaActual = (ArrayList<Object>) lista;
                    listaActual.add(var);
                    RESULT = listaActual;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_valores ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Object> nuevaLista = new ArrayList<Object>();
                    nuevaLista.add(var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_valoresDouble ::= lista_valoresDouble COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Double> listaActual = (ArrayList<Double>) lista;
                    listaActual.add((Double) var); 
                    RESULT = listaActual; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresDouble",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_valoresDouble ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Double> nuevaLista = new ArrayList<Double>();
                    nuevaLista.add((Double) var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresDouble",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_valoresChar ::= lista_valoresChar COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<String> listaActual = (ArrayList<String>) lista;
                    listaActual.add((String) var); 
                    RESULT = listaActual; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresChar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_valoresChar ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<String> nuevaLista = new ArrayList<String>();
                    nuevaLista.add((String) var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresChar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_print ::= CONSOLE DOS_PUNTOS PRINT IGUAL lista_expresiones END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Util.agregarTexto(text.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_expresiones ::= lista_expresiones COMA valor 
            {
              Object RESULT =null;
		int text1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int text1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object text1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int text2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int text2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object text2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = text1.toString() + ", " + text2.toString();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_expresiones ::= valor 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_column ::= CONSOLE DOS_PUNTOS COLUMN IGUAL valor ACCESO lista_expresionesColumn END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            Util.agregarTexto("-----------");
                            Util.agregarTexto(var.toString()); 
                            Util.agregarTexto("-----------");
                            if (arreglo instanceof double[]){
                                double[] temp = (double[]) arreglo;
                                for(double elemento : temp) {
                                    Util.agregarTexto(String.valueOf(elemento));  
                                }                                 
                            } else{ 
                                Object[] array = (Object[]) arreglo;
                                for(Object elemento : array) {
                                    Util.agregarTexto(elemento.toString()); 
                                } 
                            }   
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_column",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_expresionesColumn ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            double[] nums = Util.arrays.get(id.toString());
                            String [] text = Util.arrayChar.get(id.toString());
                            if(nums != null){
                                RESULT = nums;
                            } else if(text != null) {
                                RESULT = text;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresionesColumn",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_expresionesColumn ::= OPENCORCHETE lista_valores CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            ArrayList<Object> listaActual;
                            if (lista instanceof ArrayList) {
                                listaActual = (ArrayList<Object>) lista;
                            } else {
                                // Manejo de error o inicialización alternativa
                                listaActual = new ArrayList<Object>();
                            }
                            Object[] array = new Object[listaActual.size()];
                            for (int i = 0; i < listaActual.size(); i++) {
                                array[i] = listaActual.get(i);
                            }
                            RESULT = array;                
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresionesColumn",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion_arit ::= SUMA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() + ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion_arit ::= RESTA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() - ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion_arit ::= MULT OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() * ((Double)num2).doubleValue());
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_arit ::= DIV OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() / ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion_arit ::= MOD OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() % ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion_estadistica ::= MEDIA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double media = Estadistica.media(array);
                        RESULT = media;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion_estadistica ::= MEDIANA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double mediana = Estadistica.mediana(array);
                        RESULT = mediana;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion_estadistica ::= MODA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double moda = Estadistica.moda(array);
                        RESULT = moda;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion_estadistica ::= VARIANZA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double varianza = Estadistica.varianza(array);
                        RESULT = varianza;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion_estadistica ::= MAX OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double max = Estadistica.max(array);
                        RESULT = max;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion_estadistica ::= MIN OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double min = Estadistica.min(array);
                        RESULT = min;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arreglo_double ::= OPENCORCHETE lista_valoresDouble CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arreglo_double ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    double[] array = Util.arrays.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arreglo_char ::= OPENCORCHETE lista_valoresChar CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<String> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<String>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<String>();
                    }
                    String[] array = new String[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arreglo_char ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    String[] array = Util.arrayChar.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= valor_double 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(n.toString()); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= valor_string 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = var;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor_double ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = Double.valueOf(n.toString()); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(d.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor_double ::= operacion_arit 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor_double ::= funcion_estadistica 
            {
              Object RESULT =null;
		int estleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int estright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object est = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = est; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor_string ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Variable var = Util.variables.get(id.toString());
                if (var != null) {
                    RESULT = var.getValor();
                } else {
                    System.out.println("Variable no encontrada");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_grafico ::= GBAR OPENPAREN sentencia_grafico EXEC GBAR END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
                        String titulo = Util.atributesGraph.get("Titulo").toString();
                        String [] ejex = (String[]) Util.atributesGraph.get("ejex");
                        double [] ejey = (double[]) Util.atributesGraph.get("ejey");
                        String titulox = Util.atributesGraph.get("Titulox").toString();
                        String tituloy = Util.atributesGraph.get("Tituloy").toString();
                        Graficar.grafica_barras(titulo, ejex, ejey, titulox, tituloy);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_grafico ::= GPIE OPENPAREN sentencia_grafico EXEC GPIE END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
                        String titulo = Util.atributesGraph.get("Titulo").toString();
                        double[] values = (double[]) Util.atributesGraph.get("values");
                        String [] labels = (String[]) Util.atributesGraph.get("labels");
                        Graficar.graficar_pie(titulo, values, labels);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_grafico ::= GLINE OPENPAREN sentencia_grafico EXEC GLINE END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
                        String titulo = Util.atributesGraph.get("Titulo").toString();
                        String [] ejex = (String[]) Util.atributesGraph.get("ejex");
                        double [] ejey = (double[]) Util.atributesGraph.get("ejey");
                        String titulox = Util.atributesGraph.get("Titulox").toString();
                        String tituloy = Util.atributesGraph.get("Tituloy").toString();
                        Graficar.grafica_linea(titulo, ejex, ejey, titulox, tituloy);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_grafico ::= GHISTOGRAM OPENPAREN sentencia_grafico EXEC GHISTOGRAM END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
                        String titulo = Util.atributesGraph.get("Titulo").toString();   
                        double[] values = (double[]) Util.atributesGraph.get("values");
                        Graficar.grafica_histograma(titulo, values);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_grafico ::= sentencia_grafico atributosGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafico",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia_grafico ::= atributosGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafico",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // atributosGraph ::= TITULO DOS_PUNTOS CHAR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Util.atributesGraph.put("Titulo",titulo.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atributosGraph ::= EJEX DOS_PUNTOS CHAR IGUAL arreglo_char END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ejex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String[] array = (String[]) ejex;
                    Util.atributesGraph.put("ejex",array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atributosGraph ::= EJEY DOS_PUNTOS DOUBLE IGUAL arreglo_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ejey = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 double[] array = (double[]) ejey;
                    Util.atributesGraph.put("ejey",array);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atributosGraph ::= TITULOX DOS_PUNTOS CHAR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulox = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Util.atributesGraph.put("Titulox",titulox.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributosGraph ::= TITULOY DOS_PUNTOS CHAR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tituloy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Util.atributesGraph.put("Tituloy",tituloy.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributosGraph ::= LABEL DOS_PUNTOS CHAR IGUAL arreglo_char END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int labelsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int labelsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object labels = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String[] array = (String[]) labels;
                    Util.atributesGraph.put("labels",array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributosGraph ::= VALUES DOS_PUNTOS DOUBLE IGUAL arreglo_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 double[] array = (double[]) values;
                    Util.atributesGraph.put("values",array);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
