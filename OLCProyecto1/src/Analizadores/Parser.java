
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.HashMap;
import Analizadores.Objetos.Variable;
import Analizadores.Objetos.ConEjecucion;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\006\000\002\004" +
    "\003\000\002\004\004\000\002\003\013\000\002\007\016" +
    "\000\002\015\012\000\002\016\005\000\002\016\003\000" +
    "\002\005\003\000\002\005\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\012\005\000\002" +
    "\012\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\016\005\001\002\000\004\002\134\001" +
    "\002\000\004\010\007\001\002\000\006\010\007\017\132" +
    "\001\002\000\004\012\011\001\002\000\006\010\uffff\017" +
    "\uffff\001\002\000\006\014\012\015\014\001\002\000\004" +
    "\013\ufff8\001\002\000\004\013\015\001\002\000\004\013" +
    "\ufff7\001\002\000\004\004\016\001\002\000\004\020\017" +
    "\001\002\000\040\004\031\005\030\006\021\007\022\033" +
    "\023\034\043\035\025\036\026\037\020\040\041\041\035" +
    "\042\042\043\036\044\040\045\033\001\002\000\004\026" +
    "\124\001\002\000\012\017\uffe0\021\uffe0\025\uffe0\027\uffe0" +
    "\001\002\000\012\017\uffe3\021\uffe3\025\uffe3\027\uffe3\001" +
    "\002\000\004\026\117\001\002\000\004\017\115\001\002" +
    "\000\004\026\110\001\002\000\004\026\103\001\002\000" +
    "\012\017\uffe1\021\uffe1\025\uffe1\027\uffe1\001\002\000\012" +
    "\017\uffe4\021\uffe4\025\uffe4\027\uffe4\001\002\000\012\017" +
    "\uffe5\021\uffe5\025\uffe5\027\uffe5\001\002\000\012\017\uffe2" +
    "\021\uffe2\025\uffe2\027\uffe2\001\002\000\004\026\100\001" +
    "\002\000\012\017\uffe7\021\uffe7\025\uffe7\027\uffe7\001\002" +
    "\000\004\026\075\001\002\000\004\026\072\001\002\000" +
    "\012\017\uffe6\021\uffe6\025\uffe6\027\uffe6\001\002\000\004" +
    "\026\067\001\002\000\004\026\064\001\002\000\004\026" +
    "\051\001\002\000\004\026\044\001\002\000\040\004\031" +
    "\005\030\006\021\007\022\033\023\034\043\035\025\036" +
    "\026\037\020\040\041\041\035\042\042\043\036\044\040" +
    "\045\033\001\002\000\004\021\046\001\002\000\040\004" +
    "\031\005\030\006\021\007\022\033\023\034\043\035\025" +
    "\036\026\037\020\040\041\041\035\042\042\043\036\044" +
    "\040\045\033\001\002\000\004\027\050\001\002\000\012" +
    "\017\ufff3\021\ufff3\025\ufff3\027\ufff3\001\002\000\006\022" +
    "\053\024\052\001\002\000\040\004\031\005\030\006\021" +
    "\007\022\033\023\034\043\035\025\036\026\037\020\040" +
    "\041\041\035\042\042\043\036\044\040\045\033\001\002" +
    "\000\004\004\056\001\002\000\004\027\055\001\002\000" +
    "\012\017\uffed\021\uffed\025\uffed\027\uffed\001\002\000\004" +
    "\027\uffe8\001\002\000\006\021\ufff5\025\ufff5\001\002\000" +
    "\006\021\061\025\062\001\002\000\040\004\031\005\030" +
    "\006\021\007\022\033\023\034\043\035\025\036\026\037" +
    "\020\040\041\041\035\042\042\043\036\044\040\045\033" +
    "\001\002\000\004\027\uffe9\001\002\000\006\021\ufff6\025" +
    "\ufff6\001\002\000\006\022\053\024\052\001\002\000\004" +
    "\027\066\001\002\000\012\017\uffef\021\uffef\025\uffef\027" +
    "\uffef\001\002\000\006\022\053\024\052\001\002\000\004" +
    "\027\071\001\002\000\012\017\uffeb\021\uffeb\025\uffeb\027" +
    "\uffeb\001\002\000\006\022\053\024\052\001\002\000\004" +
    "\027\074\001\002\000\012\017\uffec\021\uffec\025\uffec\027" +
    "\uffec\001\002\000\006\022\053\024\052\001\002\000\004" +
    "\027\077\001\002\000\012\017\uffee\021\uffee\025\uffee\027" +
    "\uffee\001\002\000\006\022\053\024\052\001\002\000\004" +
    "\027\102\001\002\000\012\017\uffea\021\uffea\025\uffea\027" +
    "\uffea\001\002\000\040\004\031\005\030\006\021\007\022" +
    "\033\023\034\043\035\025\036\026\037\020\040\041\041" +
    "\035\042\042\043\036\044\040\045\033\001\002\000\004" +
    "\021\105\001\002\000\040\004\031\005\030\006\021\007" +
    "\022\033\023\034\043\035\025\036\026\037\020\040\041" +
    "\041\035\042\042\043\036\044\040\045\033\001\002\000" +
    "\004\027\107\001\002\000\012\017\ufff1\021\ufff1\025\ufff1" +
    "\027\ufff1\001\002\000\040\004\031\005\030\006\021\007" +
    "\022\033\023\034\043\035\025\036\026\037\020\040\041" +
    "\041\035\042\042\043\036\044\040\045\033\001\002\000" +
    "\004\021\112\001\002\000\040\004\031\005\030\006\021" +
    "\007\022\033\023\034\043\035\025\036\026\037\020\040" +
    "\041\041\035\042\042\043\036\044\040\045\033\001\002" +
    "\000\004\027\114\001\002\000\012\017\ufff2\021\ufff2\025" +
    "\ufff2\027\ufff2\001\002\000\004\011\116\001\002\000\006" +
    "\010\ufffd\017\ufffd\001\002\000\040\004\031\005\030\006" +
    "\021\007\022\033\023\034\043\035\025\036\026\037\020" +
    "\040\041\041\035\042\042\043\036\044\040\045\033\001" +
    "\002\000\004\021\121\001\002\000\040\004\031\005\030" +
    "\006\021\007\022\033\023\034\043\035\025\036\026\037" +
    "\020\040\041\041\035\042\042\043\036\044\040\045\033" +
    "\001\002\000\004\027\123\001\002\000\012\017\ufff4\021" +
    "\ufff4\025\ufff4\027\ufff4\001\002\000\040\004\031\005\030" +
    "\006\021\007\022\033\023\034\043\035\025\036\026\037" +
    "\020\040\041\041\035\042\042\043\036\044\040\045\033" +
    "\001\002\000\004\021\126\001\002\000\040\004\031\005" +
    "\030\006\021\007\022\033\023\034\043\035\025\036\026" +
    "\037\020\040\041\041\035\042\042\043\036\044\040\045" +
    "\033\001\002\000\004\027\130\001\002\000\012\017\ufff0" +
    "\021\ufff0\025\ufff0\027\ufff0\001\002\000\006\010\ufffe\017" +
    "\ufffe\001\002\000\004\016\133\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\007\004\005\001\001\000\004\003\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\023\011" +
    "\031\013\033\014\036\017\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\044\011\031\013\033\014\036\017\026\001\001\000" +
    "\002\001\001\000\014\006\046\011\031\013\033\014\036" +
    "\017\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\053\001\001\000\016\006\056\010\057\011\031" +
    "\013\033\014\036\017\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\062\011\031\013" +
    "\033\014\036\017\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\103\011\031" +
    "\013\033\014\036\017\026\001\001\000\002\001\001\000" +
    "\014\006\105\011\031\013\033\014\036\017\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\110\011" +
    "\031\013\033\014\036\017\026\001\001\000\002\001\001" +
    "\000\014\006\112\011\031\013\033\014\036\017\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\117\011\031\013\033\014" +
    "\036\017\026\001\001\000\002\001\001\000\014\006\121" +
    "\011\031\013\033\014\036\017\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\124\011\031\013\033" +
    "\014\036\017\026\001\001\000\002\001\001\000\014\006" +
    "\126\011\031\013\033\014\036\017\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM declaraciones END PROGRAM 
            {
              Object RESULT =null;
		
    ConEjecucion.imprimirVariables();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaraciones declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_variable ::= VAR PUNTOS tipo_dato DOS_PUNTOS IDENTIFICADOR ASIGNACION valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    if (tipo.toString() == "double") {
        Variable var = new Variable(id.toString(), tipo.toString(), v.toString());
        ConEjecucion.variables.put(id.toString(), var);
    } else if (tipo.toString() == "char") {
        Variable var = new Variable(id.toString(), tipo.toString(), v.toString());
        ConEjecucion.variables.put(id.toString(), var);
    }  


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_array ::= ARR PUNTOS tipo_dato DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valores CLOSECORCHETE END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia_print ::= CONSOLE DOS_PUNTOS DOS_PUNTOS PRINT IGUAL lista_expresiones END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_expresiones ::= lista_expresiones COMA valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_expresiones ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_dato ::= DOUBLE 
            {
              Object RESULT =null;
		 
                RESULT = "double"; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		 
                RESULT = "char"; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_valores ::= lista_valores COMA valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_valores ::= valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacion_arit ::= SUMA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operacion_arit ::= RESTA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacion_arit ::= MULT OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacion_arit ::= DIV OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion_arit ::= MOD OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcion_estadistica ::= MEDIA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcion_estadistica ::= MEDIANA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcion_estadistica ::= MODA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcion_estadistica ::= VARIANZA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcion_estadistica ::= MAX OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcion_estadistica ::= MIN OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arreglo_double ::= OPENCORCHETE lista_valores CLOSECORCHETE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arreglo_double ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valor ::= valor_double 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = Double.valueOf(n.toString()); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valor ::= valor_string 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   
                    Variable var = ConEjecucion.variables.get(id.toString());
                        if (var == null) {
                            // Manejo de error: variable no definida.
                            throw new Exception("Variable no definida: " + id.toString());
                        } else {
                                RESULT = var.getValor(); // Asigna la variable completa para usar su valor más adelante.
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valor_double ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = Double.valueOf(n.toString()); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(d.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valor_double ::= operacion_arit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valor_double ::= funcion_estadistica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valor_string ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
