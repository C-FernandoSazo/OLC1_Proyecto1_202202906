
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.HashMap;
import Analizadores.Objetos.ConEjecucion;
import Analizadores.Objetos.Errores;
import Analizadores.Objetos.Variable;
import java.util.ArrayList;
import java.util.Arrays;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import java.io.File;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\006\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\003\013\000\002\003\013\000\002\007\016\000\002" +
    "\007\016\000\002\024\005\000\002\024\003\000\002\010" +
    "\005\000\002\010\003\000\002\020\005\000\002\020\003" +
    "\000\002\015\011\000\002\016\005\000\002\016\003\000" +
    "\002\021\013\000\002\022\004\000\002\022\005\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\011\010\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\012\005\000\002\012\004\000\002" +
    "\025\005\000\002\025\004\000\002\006\002\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\023\003\000\002\026\014\000\002" +
    "\026\014\000\002\026\014\000\002\027\004\000\002\027" +
    "\003\000\002\030\011\000\002\030\011\000\002\030\011" +
    "\000\002\030\011\000\002\030\011\000\002\030\011\000" +
    "\002\030\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\016\005\001\002\000\004\002\357\001" +
    "\002\000\016\010\013\024\006\032\021\050\015\051\012" +
    "\052\020\001\002\000\004\012\332\001\002\000\020\010" +
    "\ufffb\017\ufffb\024\ufffb\032\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\001\002\000\020\010\ufffe\017\ufffe\024\ufffe\032\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\001\002\000\020\010\013\017\330" +
    "\024\006\032\021\050\015\051\012\052\020\001\002\000" +
    "\004\027\316\001\002\000\004\012\277\001\002\000\020" +
    "\010\ufffd\017\ufffd\024\ufffd\032\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\001\002\000\004\027\266\001\002\000\020\010\ufffa" +
    "\017\ufffa\024\ufffa\032\ufffa\050\ufffa\051\ufffa\052\ufffa\001" +
    "\002\000\020\010\ufff9\017\ufff9\024\ufff9\032\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\001\002\000\004\027\162\001\002\000" +
    "\004\013\023\001\002\000\020\010\ufffc\017\ufffc\024\ufffc" +
    "\032\ufffc\050\ufffc\051\ufffc\052\ufffc\001\002\000\006\033" +
    "\024\034\025\001\002\000\004\031\153\001\002\000\004" +
    "\031\026\001\002\000\042\004\041\005\037\006\030\007" +
    "\031\021\uffd9\035\032\036\053\037\034\040\035\041\027" +
    "\042\051\043\045\044\052\045\046\046\050\047\043\001" +
    "\002\000\004\027\146\001\002\000\014\017\uffd1\021\uffd1" +
    "\022\uffd1\026\uffd1\030\uffd1\001\002\000\014\017\uffd4\021" +
    "\uffd4\022\uffd4\026\uffd4\030\uffd4\001\002\000\004\027\141" +
    "\001\002\000\004\021\125\001\002\000\004\027\120\001" +
    "\002\000\004\027\113\001\002\000\014\017\uffd2\021\uffd2" +
    "\022\uffd2\026\uffd2\030\uffd2\001\002\000\014\017\uffd5\021" +
    "\uffd5\022\uffd5\026\uffd5\030\uffd5\001\002\000\014\017\uffd6" +
    "\021\uffd6\022\uffd6\026\uffd6\030\uffd6\001\002\000\014\017" +
    "\uffd0\021\uffd0\022\uffd0\026\uffd0\030\uffd0\001\002\000\014" +
    "\017\uffd3\021\uffd3\022\uffd3\026\uffd3\030\uffd3\001\002\000" +
    "\004\027\110\001\002\000\014\017\uffd8\021\uffd8\022\uffd8" +
    "\026\uffd8\030\uffd8\001\002\000\004\027\105\001\002\000" +
    "\004\027\102\001\002\000\014\017\uffd7\021\uffd7\022\uffd7" +
    "\026\uffd7\030\uffd7\001\002\000\004\027\077\001\002\000" +
    "\004\027\074\001\002\000\004\027\061\001\002\000\004" +
    "\027\054\001\002\000\042\004\041\005\037\006\030\007" +
    "\031\022\uffd9\035\032\036\053\037\034\040\035\041\027" +
    "\042\051\043\045\044\052\045\046\046\050\047\043\001" +
    "\002\000\004\022\056\001\002\000\042\004\041\005\037" +
    "\006\030\007\031\030\uffd9\035\032\036\053\037\034\040" +
    "\035\041\027\042\051\043\045\044\052\045\046\046\050" +
    "\047\043\001\002\000\004\030\060\001\002\000\014\017" +
    "\uffe7\021\uffe7\022\uffe7\026\uffe7\030\uffe7\001\002\000\006" +
    "\023\063\025\062\001\002\000\044\004\041\005\037\006" +
    "\030\007\031\022\uffd9\026\uffd9\035\032\036\053\037\034" +
    "\040\035\041\027\042\051\043\045\044\052\045\046\046" +
    "\050\047\043\001\002\000\004\004\066\001\002\000\004" +
    "\030\065\001\002\000\014\017\uffe1\021\uffe1\022\uffe1\026" +
    "\uffe1\030\uffe1\001\002\000\006\017\uffdc\030\uffdc\001\002" +
    "\000\006\022\071\026\072\001\002\000\006\022\ufff1\026" +
    "\ufff1\001\002\000\044\004\041\005\037\006\030\007\031" +
    "\022\uffd9\026\uffd9\035\032\036\053\037\034\040\035\041" +
    "\027\042\051\043\045\044\052\045\046\046\050\047\043" +
    "\001\002\000\006\017\uffdd\030\uffdd\001\002\000\006\022" +
    "\ufff2\026\ufff2\001\002\000\006\023\063\025\062\001\002" +
    "\000\004\030\076\001\002\000\014\017\uffe3\021\uffe3\022" +
    "\uffe3\026\uffe3\030\uffe3\001\002\000\006\023\063\025\062" +
    "\001\002\000\004\030\101\001\002\000\014\017\uffdf\021" +
    "\uffdf\022\uffdf\026\uffdf\030\uffdf\001\002\000\006\023\063" +
    "\025\062\001\002\000\004\030\104\001\002\000\014\017" +
    "\uffe0\021\uffe0\022\uffe0\026\uffe0\030\uffe0\001\002\000\006" +
    "\023\063\025\062\001\002\000\004\030\107\001\002\000" +
    "\014\017\uffe2\021\uffe2\022\uffe2\026\uffe2\030\uffe2\001\002" +
    "\000\006\023\063\025\062\001\002\000\004\030\112\001" +
    "\002\000\014\017\uffde\021\uffde\022\uffde\026\uffde\030\uffde" +
    "\001\002\000\042\004\041\005\037\006\030\007\031\022" +
    "\uffd9\035\032\036\053\037\034\040\035\041\027\042\051" +
    "\043\045\044\052\045\046\046\050\047\043\001\002\000" +
    "\004\022\115\001\002\000\042\004\041\005\037\006\030" +
    "\007\031\030\uffd9\035\032\036\053\037\034\040\035\041" +
    "\027\042\051\043\045\044\052\045\046\046\050\047\043" +
    "\001\002\000\004\030\117\001\002\000\014\017\uffe5\021" +
    "\uffe5\022\uffe5\026\uffe5\030\uffe5\001\002\000\042\004\041" +
    "\005\037\006\030\007\031\022\uffd9\035\032\036\053\037" +
    "\034\040\035\041\027\042\051\043\045\044\052\045\046" +
    "\046\050\047\043\001\002\000\004\022\122\001\002\000" +
    "\042\004\041\005\037\006\030\007\031\030\uffd9\035\032" +
    "\036\053\037\034\040\035\041\027\042\051\043\045\044" +
    "\052\045\046\046\050\047\043\001\002\000\004\030\124" +
    "\001\002\000\014\017\uffe6\021\uffe6\022\uffe6\026\uffe6\030" +
    "\uffe6\001\002\000\006\023\130\025\126\001\002\000\044" +
    "\004\041\005\037\006\030\007\031\022\uffd9\026\uffd9\035" +
    "\032\036\053\037\034\040\035\041\027\042\051\043\045" +
    "\044\052\045\046\046\050\047\043\001\002\000\004\017" +
    "\132\001\002\000\004\004\131\001\002\000\004\017\uffea" +
    "\001\002\000\004\011\133\001\002\000\020\010\uffeb\017" +
    "\uffeb\024\uffeb\032\uffeb\050\uffeb\051\uffeb\052\uffeb\001\002" +
    "\000\006\022\ufff3\026\ufff3\001\002\000\006\022\136\026" +
    "\137\001\002\000\044\004\041\005\037\006\030\007\031" +
    "\022\uffd9\026\uffd9\035\032\036\053\037\034\040\035\041" +
    "\027\042\051\043\045\044\052\045\046\046\050\047\043" +
    "\001\002\000\004\017\uffe9\001\002\000\006\022\ufff4\026" +
    "\ufff4\001\002\000\042\004\041\005\037\006\030\007\031" +
    "\022\uffd9\035\032\036\053\037\034\040\035\041\027\042" +
    "\051\043\045\044\052\045\046\046\050\047\043\001\002" +
    "\000\004\022\143\001\002\000\042\004\041\005\037\006" +
    "\030\007\031\030\uffd9\035\032\036\053\037\034\040\035" +
    "\041\027\042\051\043\045\044\052\045\046\046\050\047" +
    "\043\001\002\000\004\030\145\001\002\000\014\017\uffe8" +
    "\021\uffe8\022\uffe8\026\uffe8\030\uffe8\001\002\000\042\004" +
    "\041\005\037\006\030\007\031\022\uffd9\035\032\036\053" +
    "\037\034\040\035\041\027\042\051\043\045\044\052\045" +
    "\046\046\050\047\043\001\002\000\004\022\150\001\002" +
    "\000\042\004\041\005\037\006\030\007\031\030\uffd9\035" +
    "\032\036\053\037\034\040\035\041\027\042\051\043\045" +
    "\044\052\045\046\046\050\047\043\001\002\000\004\030" +
    "\152\001\002\000\014\017\uffe4\021\uffe4\022\uffe4\026\uffe4" +
    "\030\uffe4\001\002\000\044\004\041\005\037\006\030\007" +
    "\031\017\uffd9\022\uffd9\035\032\036\053\037\034\040\035" +
    "\041\027\042\051\043\045\044\052\045\046\046\050\047" +
    "\043\001\002\000\006\017\157\022\156\001\002\000\006" +
    "\017\uffec\022\uffec\001\002\000\044\004\041\005\037\006" +
    "\030\007\031\017\uffd9\022\uffd9\035\032\036\053\037\034" +
    "\040\035\041\027\042\051\043\045\044\052\045\046\046" +
    "\050\047\043\001\002\000\004\011\160\001\002\000\020" +
    "\010\uffee\017\uffee\024\uffee\032\uffee\050\uffee\051\uffee\052" +
    "\uffee\001\002\000\006\017\uffed\022\uffed\001\002\000\020" +
    "\054\163\055\165\056\164\057\171\060\170\061\172\062" +
    "\167\001\002\000\004\013\260\001\002\000\004\013\252" +
    "\001\002\000\004\013\244\001\002\000\022\054\163\055" +
    "\165\056\164\057\171\060\170\061\172\062\167\063\234" +
    "\001\002\000\004\013\216\001\002\000\004\013\210\001" +
    "\002\000\004\013\202\001\002\000\004\013\174\001\002" +
    "\000\022\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\062\uffcb\063\uffcb\001\002\000\004\014\175\001\002" +
    "\000\004\031\176\001\002\000\006\023\063\025\062\001" +
    "\002\000\004\017\200\001\002\000\004\011\201\001\002" +
    "\000\022\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\001\002\000\004\015\203\001\002" +
    "\000\004\031\204\001\002\000\042\004\041\005\037\006" +
    "\030\007\031\017\uffd9\035\032\036\053\037\034\040\035" +
    "\041\027\042\051\043\045\044\052\045\046\046\050\047" +
    "\043\001\002\000\004\017\206\001\002\000\004\011\207" +
    "\001\002\000\022\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002\000\004\015\211" +
    "\001\002\000\004\031\212\001\002\000\042\004\041\005" +
    "\037\006\030\007\031\017\uffd9\035\032\036\053\037\034" +
    "\040\035\041\027\042\051\043\045\044\052\045\046\046" +
    "\050\047\043\001\002\000\004\017\214\001\002\000\004" +
    "\011\215\001\002\000\022\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\001\002\000\004" +
    "\015\217\001\002\000\004\031\220\001\002\000\006\023" +
    "\223\025\221\001\002\000\044\004\041\005\037\006\030" +
    "\007\031\022\uffd9\026\uffd9\035\032\036\053\037\034\040" +
    "\035\041\027\042\051\043\045\044\052\045\046\046\050" +
    "\047\043\001\002\000\004\017\225\001\002\000\004\004" +
    "\224\001\002\000\004\017\uffda\001\002\000\004\011\226" +
    "\001\002\000\022\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\006\022\uffef" +
    "\026\uffef\001\002\000\006\022\231\026\232\001\002\000" +
    "\044\004\041\005\037\006\030\007\031\022\uffd9\026\uffd9" +
    "\035\032\036\053\037\034\040\035\041\027\042\051\043" +
    "\045\044\052\045\046\046\050\047\043\001\002\000\004" +
    "\017\uffdb\001\002\000\006\022\ufff0\026\ufff0\001\002\000" +
    "\004\052\236\001\002\000\022\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\001\002\000" +
    "\004\017\237\001\002\000\004\011\240\001\002\000\004" +
    "\030\241\001\002\000\004\017\242\001\002\000\004\011" +
    "\243\001\002\000\020\010\uffcd\017\uffcd\024\uffcd\032\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\001\002\000\004\015\245\001" +
    "\002\000\004\031\246\001\002\000\006\023\223\025\221" +
    "\001\002\000\004\017\250\001\002\000\004\011\251\001" +
    "\002\000\022\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\001\002\000\004\014\253\001" +
    "\002\000\004\031\254\001\002\000\006\023\063\025\062" +
    "\001\002\000\004\017\256\001\002\000\004\011\257\001" +
    "\002\000\022\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\001\002\000\004\015\261\001" +
    "\002\000\004\031\262\001\002\000\042\004\041\005\037" +
    "\006\030\007\031\017\uffd9\035\032\036\053\037\034\040" +
    "\035\041\027\042\051\043\045\044\052\045\046\046\050" +
    "\047\043\001\002\000\004\017\264\001\002\000\004\011" +
    "\265\001\002\000\022\054\uffca\055\uffca\056\uffca\057\uffca" +
    "\060\uffca\061\uffca\062\uffca\063\uffca\001\002\000\020\054" +
    "\163\055\165\056\164\057\171\060\170\061\172\062\167" +
    "\001\002\000\022\054\163\055\165\056\164\057\171\060" +
    "\170\061\172\062\167\063\270\001\002\000\004\050\271" +
    "\001\002\000\004\017\272\001\002\000\004\011\273\001" +
    "\002\000\004\030\274\001\002\000\004\017\275\001\002" +
    "\000\004\011\276\001\002\000\020\010\uffcf\017\uffcf\024" +
    "\uffcf\032\uffcf\050\uffcf\051\uffcf\052\uffcf\001\002\000\006" +
    "\014\300\015\301\001\002\000\004\013\310\001\002\000" +
    "\004\013\302\001\002\000\004\004\303\001\002\000\004" +
    "\020\304\001\002\000\004\006\030\001\002\000\004\017" +
    "\306\001\002\000\004\011\307\001\002\000\020\010\ufff7" +
    "\017\ufff7\024\ufff7\032\ufff7\050\ufff7\051\ufff7\052\ufff7\001" +
    "\002\000\004\004\311\001\002\000\004\020\312\001\002" +
    "\000\034\005\037\007\031\035\032\036\053\037\034\040" +
    "\035\041\027\042\051\043\045\044\052\045\046\046\050" +
    "\047\043\001\002\000\004\017\314\001\002\000\004\011" +
    "\315\001\002\000\020\010\ufff8\017\ufff8\024\ufff8\032\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\001\002\000\020\054\163\055" +
    "\165\056\164\057\171\060\170\061\172\062\167\001\002" +
    "\000\022\054\163\055\165\056\164\057\171\060\170\061" +
    "\172\062\167\063\320\001\002\000\004\051\321\001\002" +
    "\000\004\017\322\001\002\000\004\011\323\001\002\000" +
    "\004\030\324\001\002\000\004\017\325\001\002\000\004" +
    "\011\326\001\002\000\020\010\uffce\017\uffce\024\uffce\032" +
    "\uffce\050\uffce\051\uffce\052\uffce\001\002\000\020\010\uffff" +
    "\017\uffff\024\uffff\032\uffff\050\uffff\051\uffff\052\uffff\001" +
    "\002\000\004\016\331\001\002\000\004\002\000\001\002" +
    "\000\006\014\333\015\334\001\002\000\004\013\346\001" +
    "\002\000\004\013\335\001\002\000\004\023\336\001\002" +
    "\000\004\004\337\001\002\000\004\020\340\001\002\000" +
    "\004\025\341\001\002\000\044\004\041\005\037\006\030" +
    "\007\031\022\uffd9\026\uffd9\035\032\036\053\037\034\040" +
    "\035\041\027\042\051\043\045\044\052\045\046\046\050" +
    "\047\043\001\002\000\006\022\231\026\343\001\002\000" +
    "\004\017\344\001\002\000\004\011\345\001\002\000\020" +
    "\010\ufff5\017\ufff5\024\ufff5\032\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\001\002\000\004\023\347\001\002\000\004\004\350" +
    "\001\002\000\004\020\351\001\002\000\004\025\352\001" +
    "\002\000\044\004\041\005\037\006\030\007\031\022\uffd9" +
    "\026\uffd9\035\032\036\053\037\034\040\035\041\027\042" +
    "\051\043\045\044\052\045\046\046\050\047\043\001\002" +
    "\000\006\022\071\026\354\001\002\000\004\017\355\001" +
    "\002\000\004\011\356\001\002\000\020\010\ufff6\017\ufff6" +
    "\024\ufff6\032\ufff6\050\ufff6\051\ufff6\052\ufff6\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\013\004\010\005\007\007\006\015\021\021\015" +
    "\026\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\013\005\326\007\006\015\021" +
    "\021\015\026\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\032\011\041\013\043\014\046\017" +
    "\035\023\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\054\011\041\013\043\014\046\017\035\023\037\001" +
    "\001\000\002\001\001\000\016\006\056\011\041\013\043" +
    "\014\046\017\035\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\063\001\001\000\020\006\067" +
    "\010\066\011\041\013\043\014\046\017\035\023\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\072\011\041\013\043\014\046\017\035\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\113\011\041\013\043\014\046\017" +
    "\035\023\037\001\001\000\002\001\001\000\016\006\115" +
    "\011\041\013\043\014\046\017\035\023\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\120\011\041" +
    "\013\043\014\046\017\035\023\037\001\001\000\002\001" +
    "\001\000\016\006\122\011\041\013\043\014\046\017\035" +
    "\023\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\126\001\001\000\020\006\133\011\041\013\043" +
    "\014\046\017\035\023\037\024\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\137\011\041\013\043\014\046\017\035\023\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\141\011\041\013\043\014\046\017\035\023\037\001\001" +
    "\000\002\001\001\000\016\006\143\011\041\013\043\014" +
    "\046\017\035\023\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\146\011\041\013\043\014\046\017" +
    "\035\023\037\001\001\000\002\001\001\000\016\006\150" +
    "\011\041\013\043\014\046\017\035\023\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\154\011\041" +
    "\013\043\014\046\016\153\017\035\023\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\160\011\041" +
    "\013\043\014\046\017\035\023\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\165" +
    "\030\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\204\011\041\013\043\014\046\017\035\023\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\212\011" +
    "\041\013\043\014\046\017\035\023\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\221\001\001\000\020" +
    "\006\226\011\041\013\043\014\046\017\035\020\227\023" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\232\011\041\013\043" +
    "\014\046\017\035\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\262\011\041\013\043\014" +
    "\046\017\035\023\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\266\030\172\001" +
    "\001\000\004\030\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\041\013\312\017\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\316\030\172\001\001\000\004\030\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\226\011\041\013\043\014\046" +
    "\017\035\020\341\023\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\067\010\352\011\041\013\043\014\046" +
    "\017\035\023\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        ConEjecucion.errores.add(new Errores("SINTACTICO", s.left, s.right, s.value.toString()));   
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM declaraciones END PROGRAM 
            {
              Object RESULT =null;
		
    ConEjecucion.imprimirVariables();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= declaracion_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= sentencia_column 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= declaracion_grafico 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_variable ::= VAR PUNTOS DOUBLE DOS_PUNTOS IDENTIFICADOR ASIGNACION valor_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    Variable var = new Variable("double",Double.valueOf(v.toString()));
                    ConEjecucion.variables.put(id.toString(), var); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variable ::= VAR PUNTOS CHAR DOS_PUNTOS IDENTIFICADOR ASIGNACION valor_string END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    Variable var = new Variable("string",v.toString());
                    ConEjecucion.variables.put(id.toString(), var); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_array ::= ARR PUNTOS DOUBLE DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valoresDouble CLOSECORCHETE END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    // Casting seguro a ArrayList<Double>
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    ConEjecucion.arrays.put(id.toString(), array);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_array ::= ARR PUNTOS CHAR DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valoresChar CLOSECORCHETE END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    ArrayList<String> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<String>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<String>();
                    }
                    String[] array = new String[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    ConEjecucion.arrayChar.put(id.toString(), array);                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_valores ::= lista_valores COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Object> listaActual = (ArrayList<Object>) lista;
                    listaActual.add(var);
                    RESULT = listaActual;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_valores ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Object> nuevaLista = new ArrayList<Object>();
                    nuevaLista.add(var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_valoresDouble ::= lista_valoresDouble COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Double> listaActual = (ArrayList<Double>) lista;
                    listaActual.add((Double) var); 
                    RESULT = listaActual; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresDouble",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_valoresDouble ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Double> nuevaLista = new ArrayList<Double>();
                    nuevaLista.add((Double) var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresDouble",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_valoresChar ::= lista_valoresChar COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<String> listaActual = (ArrayList<String>) lista;
                    listaActual.add((String) var); 
                    RESULT = listaActual; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresChar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lista_valoresChar ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<String> nuevaLista = new ArrayList<String>();
                    nuevaLista.add((String) var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresChar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_print ::= CONSOLE DOS_PUNTOS PRINT IGUAL lista_expresiones END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    System.out.println("Salida: "+text.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_expresiones ::= lista_expresiones COMA valor 
            {
              Object RESULT =null;
		int text1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int text1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object text1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int text2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int text2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object text2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = text1.toString() + ", " + text2.toString();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_expresiones ::= valor 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia_column ::= CONSOLE DOS_PUNTOS COLUMN IGUAL valor ACCESO lista_expresionesColumn END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            System.out.println("----------");
                            System.out.println(var.toString());
                            System.out.println("----------");
                            if (arreglo instanceof double[]){
                                double[] temp = (double[]) arreglo;
                                for(double elemento : temp) {
                                    System.out.println(elemento);
                                }                                 
                            } else{ 
                                Object[] array = (Object[]) arreglo;
                                for(Object elemento : array) {
                                    System.out.println(elemento);
                                } 
                            }  
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_column",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_expresionesColumn ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            double[] nums = ConEjecucion.arrays.get(id.toString());
                            String [] text = ConEjecucion.arrayChar.get(id.toString());
                            if(nums != null){
                                RESULT = nums;
                            } else if(text != null) {
                                RESULT = text;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresionesColumn",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_expresionesColumn ::= OPENCORCHETE lista_valores CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            ArrayList<Object> listaActual;
                            if (lista instanceof ArrayList) {
                                listaActual = (ArrayList<Object>) lista;
                            } else {
                                // Manejo de error o inicialización alternativa
                                listaActual = new ArrayList<Object>();
                            }
                            Object[] array = new Object[listaActual.size()];
                            for (int i = 0; i < listaActual.size(); i++) {
                                array[i] = listaActual.get(i);
                            }
                            RESULT = array;                
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresionesColumn",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion_arit ::= SUMA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() + ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion_arit ::= RESTA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() - ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion_arit ::= MULT OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() * ((Double)num2).doubleValue());
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_arit ::= DIV OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() / ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion_arit ::= MOD OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() % ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion_estadistica ::= MEDIA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double media = 0;
                        for (int i=0; i < array.length; i++) {
                            media += array[i];
                        }
                        media = media / array.length;
                        RESULT = media;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion_estadistica ::= MEDIANA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        Arrays.sort(array);
                        int n = array.length;
                        double mediana;
                        if (n % 2 != 0) {
                            mediana =  array[n/2];
                            RESULT = mediana;
                        } else {
                                mediana = (array[(n/2)-1] + array[n/2]) / 2;
                                RESULT = mediana;
                            }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion_estadistica ::= MODA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        int maxRepeticion = 0;
                        double moda = 0;
                        for (int i=0; i < array.length; i++) {
                            int numRepeticiones = 0;
                            for (int j=0; j<array.length; j++) {
                                if(array[i] == array[j]) {
                                    numRepeticiones++;
                                }
                                if (numRepeticiones>maxRepeticion) {    
                                    moda = array[i];
                                    maxRepeticion = numRepeticiones;
                                }
                            }
                        }
                        RESULT = moda;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion_estadistica ::= VARIANZA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double media = 0;
                        for (int i=0; i < array.length; i++) {
                            media += array[i];
                        }
                        media = media / array.length;

                        double sumaCuadrados = 0;
                        double varianza = 0;
                        for (double num : array){
                            sumaCuadrados += Math.pow(num - media, 2);
                        }
                        varianza = sumaCuadrados / array.length;
                        RESULT = varianza;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion_estadistica ::= MAX OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double max = 0;
                        for (int i = 0; i<array.length; i++) {
                            if (array[i] > max) {
                                max = array[i];
                            }
                        }
                        RESULT = max;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion_estadistica ::= MIN OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double min = 0;
                        for (int i = 0; i<array.length; i++) {
                            if (min == 0){
                                min = array[i];
                            }
                            else if (array[i] < min) {
                                min = array[i];
                            }
                        }
                        RESULT = min;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arreglo_double ::= OPENCORCHETE lista_valoresDouble CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arreglo_double ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    double[] array = ConEjecucion.arrays.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arreglo_char ::= OPENCORCHETE lista_valoresChar CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<String> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<String>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<String>();
                    }
                    String[] array = new String[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arreglo_char ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    String[] array = ConEjecucion.arrayChar.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_char",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor ::= valor_double 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(n.toString()); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor ::= valor_string 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = var;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor_double ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = Double.valueOf(n.toString()); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(d.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor_double ::= operacion_arit 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor_double ::= funcion_estadistica 
            {
              Object RESULT =null;
		int estleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int estright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object est = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = est; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valor_string ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Variable var = ConEjecucion.variables.get(id.toString());
                if (var != null) {
                    RESULT = var.getValor();
                } else {
                    System.out.println("Variable no encontrada");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_grafico ::= GBAR OPENPAREN sentencia_grafico EXEC GBAR END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_grafico ::= GPIE OPENPAREN sentencia_grafico EXEC GPIE END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_grafico ::= GLINE OPENPAREN sentencia_grafico EXEC GLINE END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_grafico",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia_grafico ::= sentencia_grafico atributosGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafico",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_grafico ::= atributosGraph 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_grafico",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // atributosGraph ::= TITULO DOS_PUNTOS CHAR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ConEjecucion.atributesGraph.put("Titulo",titulo.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // atributosGraph ::= EJEX DOS_PUNTOS CHAR IGUAL arreglo_char END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ejexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ejex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String[] array = (String[]) ejex;
                    ConEjecucion.atributesGraph.put("ejex",array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atributosGraph ::= EJEY DOS_PUNTOS DOUBLE IGUAL arreglo_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int ejeyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejeyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ejey = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 double[] array = (double[]) ejey;
                    ConEjecucion.atributesGraph.put("ejey",array);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atributosGraph ::= TITULOX DOS_PUNTOS CHAR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titulox = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ConEjecucion.atributesGraph.put("Titulox",titulox.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atributosGraph ::= TITULOY DOS_PUNTOS CHAR IGUAL valor END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tituloyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tituloy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 ConEjecucion.atributesGraph.put("Tituloy",tituloy.toString());  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributosGraph ::= LABEL DOS_PUNTOS CHAR IGUAL arreglo_char END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int labelsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int labelsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object labels = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 String[] array = (String[]) labels;
                    ConEjecucion.atributesGraph.put("labels",array); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributosGraph ::= VALUES DOS_PUNTOS DOUBLE IGUAL arreglo_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object values = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 double[] array = (double[]) values;
                    ConEjecucion.atributesGraph.put("values",array);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atributosGraph",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
