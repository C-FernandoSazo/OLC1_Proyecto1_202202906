package Analizadores;
import java_cup.runtime.*;
import Analizadores.Objetos.Util;
import Analizadores.Objetos.Errores;
import Analizadores.Objetos.Variable;
import java.util.ArrayList;
import Operaciones.Graficar;
import Operaciones.Estadistica;

parser code 
{:
    public void syntax_error(Symbol s){
        Util.errores.add(new Errores("SINTACTICO", s.left, s.right, s.value.toString()));   
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
:}

terminal IDENTIFICADOR, NUMERO, CADENA, DECIMAL;
terminal VAR, PUNTO_Y_COMA, PUNTOS, DOS_PUNTOS, PROGRAM, END, ASIGNACION, ACCESO;
terminal COMA, ARROBA, ARR, OPENCORCHETE, CLOSECORCHETE, OPENPAREN, CLOSEPAREN, IGUAL, CONSOLE, PRINT, COLUMN;
terminal SUMA, RESTA, MULT, DIV, MOD, MEDIA, MEDIANA, MODA, VARIANZA, MAX, MIN;
terminal GBAR, GPIE, GLINE, GHISTOGRAM, TITULO, EJEX, EJEY, TITULOX, TITULOY, VALUES, LABEL, EXEC;

non terminal inicio, declaracion_variable, declaraciones, sentencia, valor, declaracion_array, lista_valoresDouble, operacion_arit;
non terminal arreglo_double, valor_double, valor_string, sentencia_print, lista_expresiones, funcion_estadistica;
non terminal lista_valoresChar, sentencia_column, lista_expresionesColumn, variable, lista_valores, arreglo_char;
non terminal declaracion_grafico, sentencia_grafico, atributosGraph;

//Estructura principal del programa

start with inicio;

inicio ::= PROGRAM declaraciones END PROGRAM
{:
    Util.imprimirVariables();
:}
;

declaraciones ::= declaraciones sentencia
                | sentencia
;

sentencia ::= declaracion_variable
                | sentencia_print
                | sentencia_column
                | declaracion_array
                | declaracion_grafico
                | error PUNTO_Y_COMA
;

declaracion_variable ::= VAR PUNTOS IDENTIFICADOR:tipo DOS_PUNTOS IDENTIFICADOR:id ASIGNACION valor:v END PUNTO_Y_COMA
                {: 
                    if (tipo.toString().toLowerCase().equals("double")) {
                    Variable var = new Variable("double",Double.valueOf(v.toString()));
                    Util.variables.put(id.toString(), var);
                    } else if (tipo.toString().toLowerCase().equals("char[]")) {
                            Variable var = new Variable("string",v.toString());
                            Util.variables.put(id.toString(), var); 
                        } else {
                            Util.errores.add(new Errores("SINTACTICO \nTipo de variable no reconocible", tipoleft, tiporight, tipo.toString())); 
                        }
                :}
;

declaracion_array ::= ARR PUNTOS IDENTIFICADOR:tipo DOS_PUNTOS ARROBA IDENTIFICADOR:id ASIGNACION OPENCORCHETE 
                        lista_valores:lista CLOSECORCHETE END PUNTO_Y_COMA
                {:
                    if (tipo.toString().toLowerCase().equals("double")) {
                        ArrayList<Double> listaActual;
                        if (lista instanceof ArrayList) {
                            listaActual = (ArrayList<Double>) lista;
                        } else {
                            // Manejo de error o inicialización alternativa
                            listaActual = new ArrayList<Double>();
                        }
                        double[] array = new double[listaActual.size()];
                        for (int i = 0; i < listaActual.size(); i++) {
                            array[i] = listaActual.get(i);
                        }
                        Util.arrays.put(id.toString(), array);
                    } else if (tipo.toString().toLowerCase().equals("char[]"))  {
                        ArrayList<String> listaActual;
                        if (lista instanceof ArrayList) {
                            listaActual = (ArrayList<String>) lista;
                        } else {
                            // Manejo de error o inicialización alternativa
                            listaActual = new ArrayList<String>();
                        }
                        String[] array = new String[listaActual.size()];
                        for (int i = 0; i < listaActual.size(); i++) {
                            array[i] = listaActual.get(i);
                        }
                        Util.arrayChar.put(id.toString(), array);
                    } else {
                            Util.errores.add(new Errores("SINTACTICO \nTipo de variable no reconocible", tipoleft, tiporight, tipo.toString())); 
                        }
                :}
;

lista_valores ::= lista_valores:lista COMA valor:var {:
                    ArrayList<Object> listaActual = (ArrayList<Object>) lista;
                    listaActual.add(var);
                    RESULT = listaActual;
                :}
                | valor:var {:
                    ArrayList<Object> nuevaLista = new ArrayList<Object>();
                    nuevaLista.add(var);
                    RESULT = nuevaLista;
                :}
;

lista_valoresDouble ::= lista_valoresDouble:lista COMA valor:var {:
                    ArrayList<Double> listaActual = (ArrayList<Double>) lista;
                    listaActual.add((Double) var); 
                    RESULT = listaActual; 
                :}
                | valor:var 
                {:
                    ArrayList<Double> nuevaLista = new ArrayList<Double>();
                    nuevaLista.add((Double) var);
                    RESULT = nuevaLista;
                :}
;

lista_valoresChar ::= lista_valoresChar:lista COMA valor:var {:
                    ArrayList<String> listaActual = (ArrayList<String>) lista;
                    listaActual.add((String) var); 
                    RESULT = listaActual; 
                :}
                | valor:var 
                {:
                    ArrayList<String> nuevaLista = new ArrayList<String>();
                    nuevaLista.add((String) var);
                    RESULT = nuevaLista;
                :}
;

sentencia_print ::= CONSOLE DOS_PUNTOS PRINT IGUAL lista_expresiones:text END PUNTO_Y_COMA {:
                    Util.agregarTexto(text.toString());
                :}
;

lista_expresiones ::= lista_expresiones:text1 COMA valor:text2 {:
                        RESULT = text1.toString() + ", " + text2.toString();
                        :}
                    | valor:text   {: RESULT = text.toString(); :}
;

sentencia_column ::= CONSOLE DOS_PUNTOS COLUMN IGUAL valor:var ACCESO lista_expresionesColumn:arreglo END PUNTO_Y_COMA  {:
                            System.out.println("ENTRO A IMPRESION ARRAYS");
                            Util.agregarTexto("-----------");
                            Util.agregarTexto(var.toString()); 
                            Util.agregarTexto("-----------");
                            if (arreglo instanceof double[]){
                                double[] temp = (double[]) arreglo;
                                for(double elemento : temp) {
                                    Util.agregarTexto(String.valueOf(elemento));  
                                }                                 
                            } else{ 
                                Object[] array = (Object[]) arreglo;
                                for(Object elemento : array) {
                                    Util.agregarTexto(elemento.toString()); 
                                } 
                            }   
                        :}
;


lista_expresionesColumn ::= ARROBA IDENTIFICADOR:id     {:
                            double[] nums = Util.arrays.get(id.toString());
                            String [] text = Util.arrayChar.get(id.toString());
                            if(nums != null){
                                RESULT = nums;
                            } else if(text != null) {
                                RESULT = text;
                            }
                        :}
                        | OPENCORCHETE lista_valores:lista CLOSECORCHETE {:
                            ArrayList<Object> listaActual;
                            if (lista instanceof ArrayList) {
                                listaActual = (ArrayList<Object>) lista;
                            } else {
                                // Manejo de error o inicialización alternativa
                                listaActual = new ArrayList<Object>();
                            }
                            Object[] array = new Object[listaActual.size()];
                            for (int i = 0; i < listaActual.size(); i++) {
                                array[i] = listaActual.get(i);
                            }
                            RESULT = array;                
                        :}
;

operacion_arit ::=
      SUMA OPENPAREN valor:num1 COMA valor:num2 CLOSEPAREN 
      {: 
          RESULT = Double.valueOf(((Double)num1).doubleValue() + ((Double)num2).doubleValue()); 
      :}
    | RESTA OPENPAREN valor:num1 COMA valor:num2 CLOSEPAREN 
      {: 
          RESULT = Double.valueOf(((Double)num1).doubleValue() - ((Double)num2).doubleValue()); 
      :}
    | MULT OPENPAREN valor:num1 COMA valor:num2 CLOSEPAREN 
      {: 
          RESULT = Double.valueOf(((Double)num1).doubleValue() * ((Double)num2).doubleValue());
      :}
    | DIV OPENPAREN valor:num1 COMA valor:num2 CLOSEPAREN 
      {: 
          RESULT = Double.valueOf(((Double)num1).doubleValue() / ((Double)num2).doubleValue()); 
      :}
    | MOD OPENPAREN valor:num1 COMA valor:num2 CLOSEPAREN 
      {: 
          RESULT = Double.valueOf(((Double)num1).doubleValue() % ((Double)num2).doubleValue()); 
      :}
;


funcion_estadistica ::= MEDIA OPENPAREN arreglo_double:arreglo CLOSEPAREN 
                    {:
                        double[] array = (double[]) arreglo;
                        double media = Estadistica.media(array);
                        RESULT = media;
                    :}
                 | MEDIANA OPENPAREN arreglo_double:arreglo CLOSEPAREN
                    {:
                        double[] array = (double[]) arreglo;
                        double mediana = Estadistica.mediana(array);
                        RESULT = mediana;
                    :}
                 | MODA OPENPAREN arreglo_double:arreglo CLOSEPAREN
                    {:
                        double[] array = (double[]) arreglo;
                        double moda = Estadistica.moda(array);
                        RESULT = moda;
                    :}
                 | VARIANZA OPENPAREN arreglo_double:arreglo CLOSEPAREN
                    {:
                        double[] array = (double[]) arreglo;
                        double varianza = Estadistica.varianza(array);
                        RESULT = varianza;
                    :}
                 | MAX OPENPAREN arreglo_double:arreglo CLOSEPAREN
                    {:
                        double[] array = (double[]) arreglo;
                        double max = Estadistica.max(array);
                        RESULT = max;
                    :}
                 | MIN OPENPAREN arreglo_double:arreglo CLOSEPAREN
                    {:
                        double[] array = (double[]) arreglo;
                        double min = Estadistica.min(array);
                        RESULT = min;
                    :}
                 ;

arreglo_double ::= OPENCORCHETE lista_valoresDouble:lista CLOSECORCHETE {:
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                :}
                 | ARROBA IDENTIFICADOR:id  {:
                    double[] array = Util.arrays.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 :}
;

arreglo_char ::= OPENCORCHETE lista_valoresChar:lista CLOSECORCHETE {:
                    ArrayList<String> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<String>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<String>();
                    }
                    String[] array = new String[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                :}
                 | ARROBA IDENTIFICADOR:id  {:
                    String[] array = Util.arrayChar.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 :}
;

valor ::= |valor_double:n {:
                    RESULT = Double.valueOf(n.toString()); 
                    :}
        | valor_string:c  {:
                    RESULT = c.toString();
                    :}
        | variable:var  {:
                    RESULT = var;
                    :}
;

valor_double ::= NUMERO:n   {: 
                    RESULT = Double.valueOf(n.toString()); 
                :}
                | DECIMAL:d  {:
                    RESULT = Double.valueOf(d.toString());
                :}
                | operacion_arit:op {: RESULT = op; :}
                | funcion_estadistica:est {: RESULT = est; :}
;

valor_string ::= CADENA:c   {:
                    RESULT = c.toString();
                    :}
;

variable ::= IDENTIFICADOR:id   {:
                Variable var = Util.variables.get(id.toString());
                if (var != null) {
                    RESULT = var.getValor();
                } else {
                    System.out.println("Variable no encontrada");
                }
            :}
;

declaracion_grafico ::= GBAR OPENPAREN sentencia_grafico EXEC GBAR END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA {:
                        String titulo = Util.atributesGraph.get("Titulo").toString();
                        String [] ejex = (String[]) Util.atributesGraph.get("ejex");
                        double [] ejey = (double[]) Util.atributesGraph.get("ejey");
                        String titulox = Util.atributesGraph.get("Titulox").toString();
                        String tituloy = Util.atributesGraph.get("Tituloy").toString();
                        Graficar.grafica_barras(titulo, ejex, ejey, titulox, tituloy);
                    :}
                    | GPIE OPENPAREN sentencia_grafico EXEC GPIE END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA   {:
                        String titulo = Util.atributesGraph.get("Titulo").toString();
                        double[] values = (double[]) Util.atributesGraph.get("values");
                        String [] labels = (String[]) Util.atributesGraph.get("labels");
                        Graficar.graficar_pie(titulo, values, labels);
                    :}
                    | GLINE OPENPAREN sentencia_grafico EXEC GLINE END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA {:
                        String titulo = Util.atributesGraph.get("Titulo").toString();
                        String [] ejex = (String[]) Util.atributesGraph.get("ejex");
                        double [] ejey = (double[]) Util.atributesGraph.get("ejey");
                        String titulox = Util.atributesGraph.get("Titulox").toString();
                        String tituloy = Util.atributesGraph.get("Tituloy").toString();
                        Graficar.grafica_linea(titulo, ejex, ejey, titulox, tituloy);
                    :}
                    | GHISTOGRAM OPENPAREN sentencia_grafico EXEC GHISTOGRAM END PUNTO_Y_COMA CLOSEPAREN END PUNTO_Y_COMA   {:
                        String titulo = Util.atributesGraph.get("Titulo").toString();   
                        double[] values = (double[]) Util.atributesGraph.get("values");
                        Graficar.grafica_histograma(titulo, values);
                    :}
;

sentencia_grafico ::= sentencia_grafico atributosGraph
                    | atributosGraph
;

atributosGraph ::= TITULO DOS_PUNTOS IDENTIFICADOR IGUAL valor:titulo END PUNTO_Y_COMA
                {: Util.atributesGraph.put("Titulo",titulo.toString());  :}
                | EJEX DOS_PUNTOS IDENTIFICADOR IGUAL arreglo_char:ejex END PUNTO_Y_COMA
                {: String[] array = (String[]) ejex;
                    Util.atributesGraph.put("ejex",array); :}
                | EJEY DOS_PUNTOS IDENTIFICADOR IGUAL arreglo_double:ejey END PUNTO_Y_COMA
                {: double[] array = (double[]) ejey;
                    Util.atributesGraph.put("ejey",array);  :}
                | TITULOX DOS_PUNTOS IDENTIFICADOR IGUAL valor:titulox END PUNTO_Y_COMA
                {: Util.atributesGraph.put("Titulox",titulox.toString());  :}
                | TITULOY DOS_PUNTOS IDENTIFICADOR IGUAL valor:tituloy END PUNTO_Y_COMA
                {: Util.atributesGraph.put("Tituloy",tituloy.toString());  :}
                | LABEL DOS_PUNTOS IDENTIFICADOR IGUAL arreglo_char:labels END PUNTO_Y_COMA
                {: String[] array = (String[]) labels;
                    Util.atributesGraph.put("labels",array); :}
                | VALUES DOS_PUNTOS IDENTIFICADOR IGUAL arreglo_double:values END PUNTO_Y_COMA
                {: double[] array = (double[]) values;
                    Util.atributesGraph.put("values",array);  :}
;