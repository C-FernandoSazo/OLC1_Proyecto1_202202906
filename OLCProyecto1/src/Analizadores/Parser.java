
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.HashMap;
import Analizadores.Objetos.ConEjecucion;
import Analizadores.Objetos.Errores;
import Analizadores.Objetos.Variable;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\006\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\003\013\000" +
    "\002\003\013\000\002\007\016\000\002\007\016\000\002" +
    "\024\005\000\002\024\003\000\002\010\005\000\002\010" +
    "\003\000\002\020\005\000\002\020\003\000\002\015\011" +
    "\000\002\016\005\000\002\016\003\000\002\021\013\000" +
    "\002\022\004\000\002\022\005\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\011\010\000\002\011" +
    "\010\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\006\000\002\017\006\000\002\017\006\000" +
    "\002\012\005\000\002\012\004\000\002\006\002\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\016\005\001\002\000\004\002\230\001" +
    "\002\000\010\010\012\024\006\032\015\001\002\000\004" +
    "\012\200\001\002\000\012\010\ufffb\017\ufffb\024\ufffb\032" +
    "\ufffb\001\002\000\012\010\ufffe\017\ufffe\024\ufffe\032\ufffe" +
    "\001\002\000\012\010\012\017\176\024\006\032\015\001" +
    "\002\000\004\012\156\001\002\000\012\010\ufffd\017\ufffd" +
    "\024\ufffd\032\ufffd\001\002\000\012\010\ufffa\017\ufffa\024" +
    "\ufffa\032\ufffa\001\002\000\004\013\017\001\002\000\012" +
    "\010\ufffc\017\ufffc\024\ufffc\032\ufffc\001\002\000\006\033" +
    "\020\034\021\001\002\000\004\031\147\001\002\000\004" +
    "\031\022\001\002\000\042\004\035\005\033\006\024\007" +
    "\025\021\uffdc\035\026\036\047\037\030\040\031\041\023" +
    "\042\045\043\041\044\046\045\042\046\044\047\037\001" +
    "\002\000\004\027\142\001\002\000\014\017\uffd4\021\uffd4" +
    "\022\uffd4\026\uffd4\030\uffd4\001\002\000\014\017\uffd7\021" +
    "\uffd7\022\uffd7\026\uffd7\030\uffd7\001\002\000\004\027\135" +
    "\001\002\000\004\021\121\001\002\000\004\027\114\001" +
    "\002\000\004\027\107\001\002\000\014\017\uffd5\021\uffd5" +
    "\022\uffd5\026\uffd5\030\uffd5\001\002\000\014\017\uffd8\021" +
    "\uffd8\022\uffd8\026\uffd8\030\uffd8\001\002\000\014\017\uffd9" +
    "\021\uffd9\022\uffd9\026\uffd9\030\uffd9\001\002\000\014\017" +
    "\uffd3\021\uffd3\022\uffd3\026\uffd3\030\uffd3\001\002\000\014" +
    "\017\uffd6\021\uffd6\022\uffd6\026\uffd6\030\uffd6\001\002\000" +
    "\004\027\104\001\002\000\014\017\uffdb\021\uffdb\022\uffdb" +
    "\026\uffdb\030\uffdb\001\002\000\004\027\101\001\002\000" +
    "\004\027\076\001\002\000\014\017\uffda\021\uffda\022\uffda" +
    "\026\uffda\030\uffda\001\002\000\004\027\073\001\002\000" +
    "\004\027\070\001\002\000\004\027\055\001\002\000\004" +
    "\027\050\001\002\000\042\004\035\005\033\006\024\007" +
    "\025\022\uffdc\035\026\036\047\037\030\040\031\041\023" +
    "\042\045\043\041\044\046\045\042\046\044\047\037\001" +
    "\002\000\004\022\052\001\002\000\042\004\035\005\033" +
    "\006\024\007\025\030\uffdc\035\026\036\047\037\030\040" +
    "\031\041\023\042\045\043\041\044\046\045\042\046\044" +
    "\047\037\001\002\000\004\030\054\001\002\000\014\017" +
    "\uffe8\021\uffe8\022\uffe8\026\uffe8\030\uffe8\001\002\000\006" +
    "\023\057\025\056\001\002\000\044\004\035\005\033\006" +
    "\024\007\025\022\uffdc\026\uffdc\035\026\036\047\037\030" +
    "\040\031\041\023\042\045\043\041\044\046\045\042\046" +
    "\044\047\037\001\002\000\004\004\062\001\002\000\004" +
    "\030\061\001\002\000\014\017\uffe2\021\uffe2\022\uffe2\026" +
    "\uffe2\030\uffe2\001\002\000\004\030\uffdd\001\002\000\006" +
    "\022\065\026\066\001\002\000\006\022\ufff2\026\ufff2\001" +
    "\002\000\044\004\035\005\033\006\024\007\025\022\uffdc" +
    "\026\uffdc\035\026\036\047\037\030\040\031\041\023\042" +
    "\045\043\041\044\046\045\042\046\044\047\037\001\002" +
    "\000\004\030\uffde\001\002\000\006\022\ufff3\026\ufff3\001" +
    "\002\000\006\023\057\025\056\001\002\000\004\030\072" +
    "\001\002\000\014\017\uffe4\021\uffe4\022\uffe4\026\uffe4\030" +
    "\uffe4\001\002\000\006\023\057\025\056\001\002\000\004" +
    "\030\075\001\002\000\014\017\uffe0\021\uffe0\022\uffe0\026" +
    "\uffe0\030\uffe0\001\002\000\006\023\057\025\056\001\002" +
    "\000\004\030\100\001\002\000\014\017\uffe1\021\uffe1\022" +
    "\uffe1\026\uffe1\030\uffe1\001\002\000\006\023\057\025\056" +
    "\001\002\000\004\030\103\001\002\000\014\017\uffe3\021" +
    "\uffe3\022\uffe3\026\uffe3\030\uffe3\001\002\000\006\023\057" +
    "\025\056\001\002\000\004\030\106\001\002\000\014\017" +
    "\uffdf\021\uffdf\022\uffdf\026\uffdf\030\uffdf\001\002\000\042" +
    "\004\035\005\033\006\024\007\025\022\uffdc\035\026\036" +
    "\047\037\030\040\031\041\023\042\045\043\041\044\046" +
    "\045\042\046\044\047\037\001\002\000\004\022\111\001" +
    "\002\000\042\004\035\005\033\006\024\007\025\030\uffdc" +
    "\035\026\036\047\037\030\040\031\041\023\042\045\043" +
    "\041\044\046\045\042\046\044\047\037\001\002\000\004" +
    "\030\113\001\002\000\014\017\uffe6\021\uffe6\022\uffe6\026" +
    "\uffe6\030\uffe6\001\002\000\042\004\035\005\033\006\024" +
    "\007\025\022\uffdc\035\026\036\047\037\030\040\031\041" +
    "\023\042\045\043\041\044\046\045\042\046\044\047\037" +
    "\001\002\000\004\022\116\001\002\000\042\004\035\005" +
    "\033\006\024\007\025\030\uffdc\035\026\036\047\037\030" +
    "\040\031\041\023\042\045\043\041\044\046\045\042\046" +
    "\044\047\037\001\002\000\004\030\120\001\002\000\014" +
    "\017\uffe7\021\uffe7\022\uffe7\026\uffe7\030\uffe7\001\002\000" +
    "\006\023\124\025\122\001\002\000\044\004\035\005\033" +
    "\006\024\007\025\022\uffdc\026\uffdc\035\026\036\047\037" +
    "\030\040\031\041\023\042\045\043\041\044\046\045\042" +
    "\046\044\047\037\001\002\000\004\017\126\001\002\000" +
    "\004\004\125\001\002\000\004\017\uffeb\001\002\000\004" +
    "\011\127\001\002\000\012\010\uffec\017\uffec\024\uffec\032" +
    "\uffec\001\002\000\006\022\ufff4\026\ufff4\001\002\000\006" +
    "\022\132\026\133\001\002\000\044\004\035\005\033\006" +
    "\024\007\025\022\uffdc\026\uffdc\035\026\036\047\037\030" +
    "\040\031\041\023\042\045\043\041\044\046\045\042\046" +
    "\044\047\037\001\002\000\004\017\uffea\001\002\000\006" +
    "\022\ufff5\026\ufff5\001\002\000\042\004\035\005\033\006" +
    "\024\007\025\022\uffdc\035\026\036\047\037\030\040\031" +
    "\041\023\042\045\043\041\044\046\045\042\046\044\047" +
    "\037\001\002\000\004\022\137\001\002\000\042\004\035" +
    "\005\033\006\024\007\025\030\uffdc\035\026\036\047\037" +
    "\030\040\031\041\023\042\045\043\041\044\046\045\042" +
    "\046\044\047\037\001\002\000\004\030\141\001\002\000" +
    "\014\017\uffe9\021\uffe9\022\uffe9\026\uffe9\030\uffe9\001\002" +
    "\000\042\004\035\005\033\006\024\007\025\022\uffdc\035" +
    "\026\036\047\037\030\040\031\041\023\042\045\043\041" +
    "\044\046\045\042\046\044\047\037\001\002\000\004\022" +
    "\144\001\002\000\042\004\035\005\033\006\024\007\025" +
    "\030\uffdc\035\026\036\047\037\030\040\031\041\023\042" +
    "\045\043\041\044\046\045\042\046\044\047\037\001\002" +
    "\000\004\030\146\001\002\000\014\017\uffe5\021\uffe5\022" +
    "\uffe5\026\uffe5\030\uffe5\001\002\000\044\004\035\005\033" +
    "\006\024\007\025\017\uffdc\022\uffdc\035\026\036\047\037" +
    "\030\040\031\041\023\042\045\043\041\044\046\045\042" +
    "\046\044\047\037\001\002\000\006\017\153\022\152\001" +
    "\002\000\006\017\uffed\022\uffed\001\002\000\044\004\035" +
    "\005\033\006\024\007\025\017\uffdc\022\uffdc\035\026\036" +
    "\047\037\030\040\031\041\023\042\045\043\041\044\046" +
    "\045\042\046\044\047\037\001\002\000\004\011\154\001" +
    "\002\000\012\010\uffef\017\uffef\024\uffef\032\uffef\001\002" +
    "\000\006\017\uffee\022\uffee\001\002\000\006\014\157\015" +
    "\160\001\002\000\004\013\167\001\002\000\004\013\161" +
    "\001\002\000\004\004\162\001\002\000\004\020\163\001" +
    "\002\000\004\006\024\001\002\000\004\017\165\001\002" +
    "\000\004\011\166\001\002\000\012\010\ufff8\017\ufff8\024" +
    "\ufff8\032\ufff8\001\002\000\004\004\170\001\002\000\004" +
    "\020\171\001\002\000\034\005\033\007\025\035\026\036" +
    "\047\037\030\040\031\041\023\042\045\043\041\044\046" +
    "\045\042\046\044\047\037\001\002\000\004\017\173\001" +
    "\002\000\004\011\174\001\002\000\012\010\ufff9\017\ufff9" +
    "\024\ufff9\032\ufff9\001\002\000\012\010\uffff\017\uffff\024" +
    "\uffff\032\uffff\001\002\000\004\016\177\001\002\000\004" +
    "\002\000\001\002\000\006\014\201\015\202\001\002\000" +
    "\004\013\217\001\002\000\004\013\203\001\002\000\004" +
    "\023\204\001\002\000\004\004\205\001\002\000\004\020" +
    "\206\001\002\000\004\025\207\001\002\000\044\004\035" +
    "\005\033\006\024\007\025\022\uffdc\026\uffdc\035\026\036" +
    "\047\037\030\040\031\041\023\042\045\043\041\044\046" +
    "\045\042\046\044\047\037\001\002\000\006\022\ufff0\026" +
    "\ufff0\001\002\000\006\022\212\026\213\001\002\000\044" +
    "\004\035\005\033\006\024\007\025\022\uffdc\026\uffdc\035" +
    "\026\036\047\037\030\040\031\041\023\042\045\043\041" +
    "\044\046\045\042\046\044\047\037\001\002\000\004\017" +
    "\214\001\002\000\004\011\215\001\002\000\012\010\ufff6" +
    "\017\ufff6\024\ufff6\032\ufff6\001\002\000\006\022\ufff1\026" +
    "\ufff1\001\002\000\004\023\220\001\002\000\004\004\221" +
    "\001\002\000\004\020\222\001\002\000\004\025\223\001" +
    "\002\000\044\004\035\005\033\006\024\007\025\022\uffdc" +
    "\026\uffdc\035\026\036\047\037\030\040\031\041\023\042" +
    "\045\043\041\044\046\045\042\046\044\047\037\001\002" +
    "\000\006\022\065\026\225\001\002\000\004\017\226\001" +
    "\002\000\004\011\227\001\002\000\012\010\ufff7\017\ufff7" +
    "\024\ufff7\032\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\002\003\001\001\000\002\001\001\000" +
    "\016\003\012\004\010\005\007\007\006\015\015\021\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\012\005\174\007\006\015\015\021\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\026\011" +
    "\035\013\037\014\042\017\031\023\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\050\011\035\013\037\014" +
    "\042\017\031\023\033\001\001\000\002\001\001\000\016" +
    "\006\052\011\035\013\037\014\042\017\031\023\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\057" +
    "\001\001\000\020\006\063\010\062\011\035\013\037\014" +
    "\042\017\031\023\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\066\011\035\013\037" +
    "\014\042\017\031\023\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\107\011" +
    "\035\013\037\014\042\017\031\023\033\001\001\000\002" +
    "\001\001\000\016\006\111\011\035\013\037\014\042\017" +
    "\031\023\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\114\011\035\013\037\014\042\017\031\023" +
    "\033\001\001\000\002\001\001\000\016\006\116\011\035" +
    "\013\037\014\042\017\031\023\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\122\001\001\000\020" +
    "\006\127\011\035\013\037\014\042\017\031\023\033\024" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\133\011\035\013\037" +
    "\014\042\017\031\023\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\135\011\035\013\037\014\042" +
    "\017\031\023\033\001\001\000\002\001\001\000\016\006" +
    "\137\011\035\013\037\014\042\017\031\023\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\142\011" +
    "\035\013\037\014\042\017\031\023\033\001\001\000\002" +
    "\001\001\000\016\006\144\011\035\013\037\014\042\017" +
    "\031\023\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\150\011\035\013\037\014\042\016\147\017" +
    "\031\023\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\154\011\035\013\037\014\042\017\031\023" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\035" +
    "\013\171\017\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\207\011\035\013" +
    "\037\014\042\017\031\020\210\023\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\215\011\035\013" +
    "\037\014\042\017\031\023\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\063\010\223\011\035\013\037\014" +
    "\042\017\031\023\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        ConEjecucion.errores.add(new Errores("SINTACTICO", s.left, s.right, s.value.toString()));   
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM declaraciones END PROGRAM 
            {
              Object RESULT =null;
		
    ConEjecucion.imprimirVariables();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaraciones sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= sentencia_print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= declaracion_array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= sentencia_column 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_variable ::= VAR PUNTOS DOUBLE DOS_PUNTOS IDENTIFICADOR ASIGNACION valor_double END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    Variable var = new Variable("double",Double.valueOf(v.toString()));
                    ConEjecucion.variables.put(id.toString(), var); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_variable ::= VAR PUNTOS CHAR DOS_PUNTOS IDENTIFICADOR ASIGNACION valor_string END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                    Variable var = new Variable("string",v.toString());
                    ConEjecucion.variables.put(id.toString(), var); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_array ::= ARR PUNTOS DOUBLE DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valoresDouble CLOSECORCHETE END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    // Casting seguro a ArrayList<Double>
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    ConEjecucion.arrays.put(id.toString(), array);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_array ::= ARR PUNTOS CHAR DOS_PUNTOS ARROBA IDENTIFICADOR ASIGNACION OPENCORCHETE lista_valoresChar CLOSECORCHETE END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    ArrayList<String> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<String>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<String>();
                    }
                    String[] array = new String[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    ConEjecucion.arrayChar.put(id.toString(), array);                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_valores ::= lista_valores COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Object> listaActual = (ArrayList<Object>) lista;
                    listaActual.add(var);
                    RESULT = listaActual;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_valores ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Object> nuevaLista = new ArrayList<Object>();
                    nuevaLista.add(var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_valoresDouble ::= lista_valoresDouble COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Double> listaActual = (ArrayList<Double>) lista;
                    listaActual.add((Double) var); 
                    RESULT = listaActual; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresDouble",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_valoresDouble ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<Double> nuevaLista = new ArrayList<Double>();
                    nuevaLista.add((Double) var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresDouble",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_valoresChar ::= lista_valoresChar COMA valor 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<String> listaActual = (ArrayList<String>) lista;
                    listaActual.add((String) var); 
                    RESULT = listaActual; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresChar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lista_valoresChar ::= valor 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    ArrayList<String> nuevaLista = new ArrayList<String>();
                    nuevaLista.add((String) var);
                    RESULT = nuevaLista;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_valoresChar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia_print ::= CONSOLE DOS_PUNTOS PRINT IGUAL lista_expresiones END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    System.out.println("Salida: "+text.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_print",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_expresiones ::= lista_expresiones COMA valor 
            {
              Object RESULT =null;
		int text1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int text1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object text1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int text2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int text2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object text2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = text1.toString() + ", " + text2.toString();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_expresiones ::= valor 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = text.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia_column ::= CONSOLE DOS_PUNTOS COLUMN IGUAL valor ACCESO lista_expresionesColumn END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                            System.out.println("----------");
                            System.out.println(var.toString());
                            System.out.println("----------");
                            if (arreglo instanceof double[]){
                                double[] temp = (double[]) arreglo;
                                for(double elemento : temp) {
                                    System.out.println(elemento);
                                }                                 
                            } else{ 
                                Object[] array = (Object[]) arreglo;
                                for(Object elemento : array) {
                                    System.out.println(elemento);
                                } 
                            }  
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia_column",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_expresionesColumn ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            double[] nums = ConEjecucion.arrays.get(id.toString());
                            String [] text = ConEjecucion.arrayChar.get(id.toString());
                            if(nums != null){
                                RESULT = nums;
                            } else if(text != null) {
                                RESULT = text;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresionesColumn",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_expresionesColumn ::= OPENCORCHETE lista_valores CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            ArrayList<Object> listaActual;
                            if (lista instanceof ArrayList) {
                                listaActual = (ArrayList<Object>) lista;
                            } else {
                                // Manejo de error o inicialización alternativa
                                listaActual = new ArrayList<Object>();
                            }
                            Object[] array = new Object[listaActual.size()];
                            for (int i = 0; i < listaActual.size(); i++) {
                                array[i] = listaActual.get(i);
                            }
                            RESULT = array;                
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_expresionesColumn",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion_arit ::= SUMA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() + ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion_arit ::= RESTA OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() - ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion_arit ::= MULT OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() * ((Double)num2).doubleValue());
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion_arit ::= DIV OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() / ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion_arit ::= MOD OPENPAREN valor COMA valor CLOSEPAREN 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
          RESULT = Double.valueOf(((Double)num1).doubleValue() % ((Double)num2).doubleValue()); 
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacion_arit",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcion_estadistica ::= MEDIA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double media = 0;
                        for (int i=0; i < array.length; i++) {
                            media += array[i];
                        }
                        media = media / array.length;
                        RESULT = media;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion_estadistica ::= MEDIANA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        Arrays.sort(array);
                        int n = array.length;
                        double mediana;
                        if (n % 2 != 0) {
                            mediana =  array[n/2];
                            RESULT = mediana;
                        } else {
                                mediana = (array[(n/2)-1] + array[n/2]) / 2;
                                RESULT = mediana;
                            }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcion_estadistica ::= MODA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        int maxRepeticion = 0;
                        double moda = 0;
                        for (int i=0; i < array.length; i++) {
                            int numRepeticiones = 0;
                            for (int j=0; j<array.length; j++) {
                                if(array[i] == array[j]) {
                                    numRepeticiones++;
                                }
                                if (numRepeticiones>maxRepeticion) {    
                                    moda = array[i];
                                    maxRepeticion = numRepeticiones;
                                }
                            }
                        }
                        RESULT = moda;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion_estadistica ::= VARIANZA OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double media = 0;
                        for (int i=0; i < array.length; i++) {
                            media += array[i];
                        }
                        media = media / array.length;

                        double sumaCuadrados = 0;
                        double varianza = 0;
                        for (double num : array){
                            sumaCuadrados += Math.pow(num - media, 2);
                        }
                        varianza = sumaCuadrados / array.length;
                        RESULT = varianza;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcion_estadistica ::= MAX OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double max = 0;
                        for (int i = 0; i<array.length; i++) {
                            if (array[i] > max) {
                                max = array[i];
                            }
                        }
                        RESULT = max;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion_estadistica ::= MIN OPENPAREN arreglo_double CLOSEPAREN 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        double[] array = (double[]) arreglo;
                        double min = 0;
                        for (int i = 0; i<array.length; i++) {
                            if (min == 0){
                                min = array[i];
                            }
                            else if (array[i] < min) {
                                min = array[i];
                            }
                        }
                        RESULT = min;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion_estadistica",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arreglo_double ::= OPENCORCHETE lista_valoresDouble CLOSECORCHETE 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    ArrayList<Double> listaActual;
                    if (lista instanceof ArrayList) {
                        listaActual = (ArrayList<Double>) lista;
                    } else {
                        // Manejo de error o inicialización alternativa
                        listaActual = new ArrayList<Double>();
                    }
                    double[] array = new double[listaActual.size()];
                    for (int i = 0; i < listaActual.size(); i++) {
                        array[i] = listaActual.get(i);
                    }
                    RESULT = array;                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arreglo_double ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    double[] array = ConEjecucion.arrays.get(id.toString());
                    if (array != null) {
                        RESULT = array;
                    } else {
                            throw new Exception("Array no definido: " + id.toString());
                        }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglo_double",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor ::= valor_double 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(n.toString()); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor ::= valor_string 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valor ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = var;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valor_double ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    RESULT = Double.valueOf(n.toString()); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valor_double ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = Double.valueOf(d.toString());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor_double ::= operacion_arit 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor_double ::= funcion_estadistica 
            {
              Object RESULT =null;
		int estleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int estright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object est = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = est; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_double",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor_string ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = c.toString();
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor_string",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                Variable var = ConEjecucion.variables.get(id.toString());
                if (var != null) {
                    RESULT = var.getValor();
                } else {
                    System.out.println("Variable no encontrada");
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
